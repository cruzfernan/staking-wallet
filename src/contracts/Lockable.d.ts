/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Locked = ContractEventLog<{}>;
export type MigrationOwnershipTransferred = ContractEventLog<{
  previousMigrationOwner: string;
  newMigrationOwner: string;
  0: string;
  1: string;
}>;
export type Unlocked = ContractEventLog<{}>;

export interface Lockable extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): Lockable;
  clone(): Lockable;
  methods: {
    /**
     * Allows the pendingMigrationOwner address to finalize the transfer.
     */
    claimMigrationOwnership(): NonPayableTransactionObject<void>;

    /**
     * Returns true if the caller is the current migrationOwner.
     */
    isMigrationOwner(): NonPayableTransactionObject<boolean>;

    locked(): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current migrationOwner.
     */
    migrationOwner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without migrationOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current migrationOwner.     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner, thereby removing any functionality that is only available to the migrationOwner.
     */
    renounceMigrationOwnership(): NonPayableTransactionObject<void>;

    /**
     * Allows the current migrationOwner to set the pendingOwner address.
     * @param newMigrationOwner The address to transfer migrationOwnership to.
     */
    transferMigrationOwnership(newMigrationOwner: string): NonPayableTransactionObject<void>;

    lock(): NonPayableTransactionObject<void>;

    unlock(): NonPayableTransactionObject<void>;
  };
  events: {
    Locked(cb?: Callback<Locked>): EventEmitter;
    Locked(options?: EventOptions, cb?: Callback<Locked>): EventEmitter;

    MigrationOwnershipTransferred(cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;
    MigrationOwnershipTransferred(options?: EventOptions, cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;

    Unlocked(cb?: Callback<Unlocked>): EventEmitter;
    Unlocked(options?: EventOptions, cb?: Callback<Unlocked>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'Locked', cb: Callback<Locked>): void;
  once(event: 'Locked', options: EventOptions, cb: Callback<Locked>): void;

  once(event: 'MigrationOwnershipTransferred', cb: Callback<MigrationOwnershipTransferred>): void;
  once(
    event: 'MigrationOwnershipTransferred',
    options: EventOptions,
    cb: Callback<MigrationOwnershipTransferred>,
  ): void;

  once(event: 'Unlocked', cb: Callback<Unlocked>): void;
  once(event: 'Unlocked', options: EventOptions, cb: Callback<Unlocked>): void;
}
