/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GenesisRefTimeDelayChanged = ContractEventLog<{
  newGenesisRefTimeDelay: string;
  0: string;
}>;
export type Payment = ContractEventLog<{
  vcid: string;
  by: string;
  amount: string;
  tier: string;
  rate: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type SubscriberAdded = ContractEventLog<{
  subscriber: string;
  0: string;
}>;
export type SubscriberRemoved = ContractEventLog<{
  subscriber: string;
  0: string;
}>;
export type SubscriptionChanged = ContractEventLog<{
  vcid: string;
  name: string;
  genRefTime: string;
  expiresAt: string;
  tier: string;
  deploymentSubset: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type VcConfigRecordChanged = ContractEventLog<{
  vcid: string;
  key: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type VcCreated = ContractEventLog<{
  vcid: string;
  owner: string;
  0: string;
  1: string;
}>;
export type VcOwnerChanged = ContractEventLog<{
  vcid: string;
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
  2: string;
}>;

export interface ISubscriptions extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): ISubscriptions;
  clone(): ISubscriptions;
  methods: {
    /**
     * Called by: authorized subscriber (plan) contracts Creates a new VC
     */
    createVC(
      name: string,
      tier: string,
      rate: number | string,
      amount: number | string,
      owner: string,
      isCertified: boolean,
      deploymentSubset: string,
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    /**
     * Called by: authorized subscriber (plan) contracts Extends the subscription of an existing VC.
     */
    extendSubscription(
      vcid: number | string,
      amount: number | string,
      payer: string,
    ): NonPayableTransactionObject<void>;

    /**
     * called by VC owner to set a VC config record. Emits a VcConfigRecordChanged event.
     */
    setVcConfigRecord(vcid: number | string, key: string, value: string): NonPayableTransactionObject<void>;

    /**
     * returns the value of a VC config record
     */
    getVcConfigRecord(vcid: number | string, key: string): NonPayableTransactionObject<string>;

    /**
     * Transfers VC ownership to a new owner (can only be called by the current owner)
     */
    setVcOwner(vcid: number | string, owner: string): NonPayableTransactionObject<void>;

    /**
     * Returns the genesis ref time delay
     */
    getGenesisRefTimeDelay(): NonPayableTransactionObject<string>;

    getVcData(
      vcId: number | string,
    ): NonPayableTransactionObject<{
      name: string;
      tier: string;
      rate: string;
      expiresAt: string;
      genRefTime: string;
      owner: string;
      deploymentSubset: string;
      isCertified: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: boolean;
    }>;

    /**
     * Called by the owner to authorize a subscriber (plan)
     */
    addSubscriber(addr: string): NonPayableTransactionObject<void>;

    /**
     * Called by the owner to set the genesis ref time delay
     */
    setGenesisRefTimeDelay(newGenesisRefTimeDelay: number | string): NonPayableTransactionObject<void>;

    /**
     * Updates the address of the contract registry
     */
    setContractRegistry(_contractRegistry: string): NonPayableTransactionObject<void>;
  };
  events: {
    GenesisRefTimeDelayChanged(cb?: Callback<GenesisRefTimeDelayChanged>): EventEmitter;
    GenesisRefTimeDelayChanged(options?: EventOptions, cb?: Callback<GenesisRefTimeDelayChanged>): EventEmitter;

    Payment(cb?: Callback<Payment>): EventEmitter;
    Payment(options?: EventOptions, cb?: Callback<Payment>): EventEmitter;

    SubscriberAdded(cb?: Callback<SubscriberAdded>): EventEmitter;
    SubscriberAdded(options?: EventOptions, cb?: Callback<SubscriberAdded>): EventEmitter;

    SubscriberRemoved(cb?: Callback<SubscriberRemoved>): EventEmitter;
    SubscriberRemoved(options?: EventOptions, cb?: Callback<SubscriberRemoved>): EventEmitter;

    SubscriptionChanged(cb?: Callback<SubscriptionChanged>): EventEmitter;
    SubscriptionChanged(options?: EventOptions, cb?: Callback<SubscriptionChanged>): EventEmitter;

    VcConfigRecordChanged(cb?: Callback<VcConfigRecordChanged>): EventEmitter;
    VcConfigRecordChanged(options?: EventOptions, cb?: Callback<VcConfigRecordChanged>): EventEmitter;

    VcCreated(cb?: Callback<VcCreated>): EventEmitter;
    VcCreated(options?: EventOptions, cb?: Callback<VcCreated>): EventEmitter;

    VcOwnerChanged(cb?: Callback<VcOwnerChanged>): EventEmitter;
    VcOwnerChanged(options?: EventOptions, cb?: Callback<VcOwnerChanged>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'GenesisRefTimeDelayChanged', cb: Callback<GenesisRefTimeDelayChanged>): void;
  once(event: 'GenesisRefTimeDelayChanged', options: EventOptions, cb: Callback<GenesisRefTimeDelayChanged>): void;

  once(event: 'Payment', cb: Callback<Payment>): void;
  once(event: 'Payment', options: EventOptions, cb: Callback<Payment>): void;

  once(event: 'SubscriberAdded', cb: Callback<SubscriberAdded>): void;
  once(event: 'SubscriberAdded', options: EventOptions, cb: Callback<SubscriberAdded>): void;

  once(event: 'SubscriberRemoved', cb: Callback<SubscriberRemoved>): void;
  once(event: 'SubscriberRemoved', options: EventOptions, cb: Callback<SubscriberRemoved>): void;

  once(event: 'SubscriptionChanged', cb: Callback<SubscriptionChanged>): void;
  once(event: 'SubscriptionChanged', options: EventOptions, cb: Callback<SubscriptionChanged>): void;

  once(event: 'VcConfigRecordChanged', cb: Callback<VcConfigRecordChanged>): void;
  once(event: 'VcConfigRecordChanged', options: EventOptions, cb: Callback<VcConfigRecordChanged>): void;

  once(event: 'VcCreated', cb: Callback<VcCreated>): void;
  once(event: 'VcCreated', options: EventOptions, cb: Callback<VcCreated>): void;

  once(event: 'VcOwnerChanged', cb: Callback<VcOwnerChanged>): void;
  once(event: 'VcOwnerChanged', options: EventOptions, cb: Callback<VcOwnerChanged>): void;
}
