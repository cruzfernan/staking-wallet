/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ContractRegistryAddressUpdated = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type EmergencyWithdrawal = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type FeesAddedToBucket = ContractEventLog<{
  bucketId: string;
  added: string;
  total: string;
  0: string;
  1: string;
  2: string;
}>;
export type FeesWithdrawnFromBucket = ContractEventLog<{
  bucketId: string;
  withdrawn: string;
  total: string;
  0: string;
  1: string;
  2: string;
}>;
export type FunctionalOwnershipTransferred = ContractEventLog<{
  previousFunctionalOwner: string;
  newFunctionalOwner: string;
  0: string;
  1: string;
}>;
export type MigrationOwnershipTransferred = ContractEventLog<{
  previousMigrationOwner: string;
  newMigrationOwner: string;
  0: string;
  1: string;
}>;

export interface FeesWallet extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): FeesWallet;
  clone(): FeesWallet;
  methods: {
    /**
     * Allows the pendingFunctionalOwner address to finalize the transfer.
     */
    claimFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Allows the pendingMigrationOwner address to finalize the transfer.
     */
    claimMigrationOwnership(): NonPayableTransactionObject<void>;

    /**
     * Returns the address of the current functionalOwner.
     */
    functionalOwner(): NonPayableTransactionObject<string>;

    getBootstrapRewardsWallet(): NonPayableTransactionObject<string>;

    getCertificationContract(): NonPayableTransactionObject<string>;

    getCertifiedFeesWallet(): NonPayableTransactionObject<string>;

    getCommitteeContract(): NonPayableTransactionObject<string>;

    getDelegationsContract(): NonPayableTransactionObject<string>;

    getElectionsContract(): NonPayableTransactionObject<string>;

    getGeneralFeesWallet(): NonPayableTransactionObject<string>;

    getGuardiansRegistrationContract(): NonPayableTransactionObject<string>;

    getProtocolContract(): NonPayableTransactionObject<string>;

    getRewardsContract(): NonPayableTransactionObject<string>;

    getStakingContract(): NonPayableTransactionObject<string>;

    getStakingRewardsWallet(): NonPayableTransactionObject<string>;

    getSubscriptionsContract(): NonPayableTransactionObject<string>;

    /**
     * Returns true if the caller is the current functionalOwner.
     */
    isFunctionalOwner(): NonPayableTransactionObject<boolean>;

    /**
     * Returns true if the caller is the current migrationOwner.
     */
    isMigrationOwner(): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current migrationOwner.
     */
    migrationOwner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without functionalOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current functionalOwner.     * NOTE: Renouncing functionalOwnership will leave the contract without an functionalOwner, thereby removing any functionality that is only available to the functionalOwner.
     */
    renounceFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Leaves the contract without migrationOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current migrationOwner.     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner, thereby removing any functionality that is only available to the migrationOwner.
     */
    renounceMigrationOwnership(): NonPayableTransactionObject<void>;

    setContractRegistry(_contractRegistry: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current functionalOwner to set the pendingOwner address.
     * @param newFunctionalOwner The address to transfer functionalOwnership to.
     */
    transferFunctionalOwnership(newFunctionalOwner: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current migrationOwner to set the pendingOwner address.
     * @param newMigrationOwner The address to transfer migrationOwnership to.
     */
    transferMigrationOwnership(newMigrationOwner: string): NonPayableTransactionObject<void>;

    /**
     * collect fees from the buckets since the last call and transfers the amount back. Called by: only Rewards contract.
     */
    collectFees(): NonPayableTransactionObject<string>;

    /**
     * Called by: subscriptions contract. Top-ups the fee pool with the given amount at the given rate (typically called by the subscriptions contract).
     */
    fillFeeBuckets(
      amount: number | string,
      monthlyRate: number | string,
      fromTimestamp: number | string,
    ): NonPayableTransactionObject<void>;

    /**
     * Called by the old FeesWallet contract. Part of the IMigratableFeesWallet interface.
     */
    acceptBucketMigration(bucketStartTime: number | string, amount: number | string): NonPayableTransactionObject<void>;

    /**
     * migrates the fees of bucket starting at startTimestamp. bucketStartTime must be a bucket's start time. Calls acceptBucketMigration in the destination contract.
     */
    migrateBucket(destination: string, bucketStartTime: number | string): NonPayableTransactionObject<void>;

    /**
     * an emergency withdrawal enables withdrawal of all funds to an escrow account. To be use in emergencies only.
     */
    emergencyWithdraw(): NonPayableTransactionObject<void>;
  };
  events: {
    ContractRegistryAddressUpdated(cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;
    ContractRegistryAddressUpdated(options?: EventOptions, cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;

    EmergencyWithdrawal(cb?: Callback<EmergencyWithdrawal>): EventEmitter;
    EmergencyWithdrawal(options?: EventOptions, cb?: Callback<EmergencyWithdrawal>): EventEmitter;

    FeesAddedToBucket(cb?: Callback<FeesAddedToBucket>): EventEmitter;
    FeesAddedToBucket(options?: EventOptions, cb?: Callback<FeesAddedToBucket>): EventEmitter;

    FeesWithdrawnFromBucket(cb?: Callback<FeesWithdrawnFromBucket>): EventEmitter;
    FeesWithdrawnFromBucket(options?: EventOptions, cb?: Callback<FeesWithdrawnFromBucket>): EventEmitter;

    FunctionalOwnershipTransferred(cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;
    FunctionalOwnershipTransferred(options?: EventOptions, cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;

    MigrationOwnershipTransferred(cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;
    MigrationOwnershipTransferred(options?: EventOptions, cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'ContractRegistryAddressUpdated', cb: Callback<ContractRegistryAddressUpdated>): void;
  once(
    event: 'ContractRegistryAddressUpdated',
    options: EventOptions,
    cb: Callback<ContractRegistryAddressUpdated>,
  ): void;

  once(event: 'EmergencyWithdrawal', cb: Callback<EmergencyWithdrawal>): void;
  once(event: 'EmergencyWithdrawal', options: EventOptions, cb: Callback<EmergencyWithdrawal>): void;

  once(event: 'FeesAddedToBucket', cb: Callback<FeesAddedToBucket>): void;
  once(event: 'FeesAddedToBucket', options: EventOptions, cb: Callback<FeesAddedToBucket>): void;

  once(event: 'FeesWithdrawnFromBucket', cb: Callback<FeesWithdrawnFromBucket>): void;
  once(event: 'FeesWithdrawnFromBucket', options: EventOptions, cb: Callback<FeesWithdrawnFromBucket>): void;

  once(event: 'FunctionalOwnershipTransferred', cb: Callback<FunctionalOwnershipTransferred>): void;
  once(
    event: 'FunctionalOwnershipTransferred',
    options: EventOptions,
    cb: Callback<FunctionalOwnershipTransferred>,
  ): void;

  once(event: 'MigrationOwnershipTransferred', cb: Callback<MigrationOwnershipTransferred>): void;
  once(
    event: 'MigrationOwnershipTransferred',
    options: EventOptions,
    cb: Callback<MigrationOwnershipTransferred>,
  ): void;
}
