/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Delegated = ContractEventLog<{
  from: string;
  to: string;
  0: string;
  1: string;
}>;
export type DelegatedStakeChanged = ContractEventLog<{
  addr: string;
  selfDelegatedStake: string;
  delegatedStake: string;
  delegators: string[];
  delegatorTotalStakes: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
  4: string[];
}>;
export type DelegationImportFinalized = ContractEventLog<{}>;
export type DelegationsImported = ContractEventLog<{
  from: string[];
  to: string[];
  notifiedElections: boolean;
  0: string[];
  1: string[];
  2: boolean;
}>;

export interface IDelegations extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IDelegations;
  clone(): IDelegations;
  methods: {
    /**
     * Stake delegation
     */
    delegate(to: string): NonPayableTransactionObject<void>;

    refreshStakeNotification(addr: string): NonPayableTransactionObject<void>;

    refreshStake(addr: string): NonPayableTransactionObject<void>;

    /**
     * Updates the address calldata of the contract registry
     */
    setContractRegistry(_contractRegistry: string): NonPayableTransactionObject<void>;

    importDelegations(
      from: string[],
      to: string[],
      _refreshStakeNotification: boolean,
    ): NonPayableTransactionObject<void>;

    finalizeDelegationImport(): NonPayableTransactionObject<void>;

    getDelegatedStakes(addr: string): NonPayableTransactionObject<string>;

    getSelfDelegatedStake(addr: string): NonPayableTransactionObject<string>;

    getDelegation(addr: string): NonPayableTransactionObject<string>;

    getTotalDelegatedStake(): NonPayableTransactionObject<string>;
  };
  events: {
    Delegated(cb?: Callback<Delegated>): EventEmitter;
    Delegated(options?: EventOptions, cb?: Callback<Delegated>): EventEmitter;

    DelegatedStakeChanged(cb?: Callback<DelegatedStakeChanged>): EventEmitter;
    DelegatedStakeChanged(options?: EventOptions, cb?: Callback<DelegatedStakeChanged>): EventEmitter;

    DelegationImportFinalized(cb?: Callback<DelegationImportFinalized>): EventEmitter;
    DelegationImportFinalized(options?: EventOptions, cb?: Callback<DelegationImportFinalized>): EventEmitter;

    DelegationsImported(cb?: Callback<DelegationsImported>): EventEmitter;
    DelegationsImported(options?: EventOptions, cb?: Callback<DelegationsImported>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'Delegated', cb: Callback<Delegated>): void;
  once(event: 'Delegated', options: EventOptions, cb: Callback<Delegated>): void;

  once(event: 'DelegatedStakeChanged', cb: Callback<DelegatedStakeChanged>): void;
  once(event: 'DelegatedStakeChanged', options: EventOptions, cb: Callback<DelegatedStakeChanged>): void;

  once(event: 'DelegationImportFinalized', cb: Callback<DelegationImportFinalized>): void;
  once(event: 'DelegationImportFinalized', options: EventOptions, cb: Callback<DelegationImportFinalized>): void;

  once(event: 'DelegationsImported', cb: Callback<DelegationsImported>): void;
  once(event: 'DelegationsImported', options: EventOptions, cb: Callback<DelegationsImported>): void;
}
