/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ContractRegistryAddressUpdated = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type FunctionalOwnershipTransferred = ContractEventLog<{
  previousFunctionalOwner: string;
  newFunctionalOwner: string;
  0: string;
  1: string;
}>;
export type GuardianDataUpdated = ContractEventLog<{
  addr: string;
  ip: string;
  orbsAddr: string;
  name: string;
  website: string;
  contact: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type GuardianMetadataChanged = ContractEventLog<{
  addr: string;
  key: string;
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type GuardianRegistered = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type GuardianUnregistered = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type Locked = ContractEventLog<{}>;
export type MigrationOwnershipTransferred = ContractEventLog<{
  previousMigrationOwner: string;
  newMigrationOwner: string;
  0: string;
  1: string;
}>;
export type Unlocked = ContractEventLog<{}>;

export interface GuardiansRegistration extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): GuardiansRegistration;
  clone(): GuardiansRegistration;
  methods: {
    /**
     * Allows the pendingFunctionalOwner address to finalize the transfer.
     */
    claimFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Allows the pendingMigrationOwner address to finalize the transfer.
     */
    claimMigrationOwnership(): NonPayableTransactionObject<void>;

    /**
     * Returns the address of the current functionalOwner.
     */
    functionalOwner(): NonPayableTransactionObject<string>;

    getBootstrapRewardsWallet(): NonPayableTransactionObject<string>;

    getCertificationContract(): NonPayableTransactionObject<string>;

    getCommitteeContract(): NonPayableTransactionObject<string>;

    getDelegationsContract(): NonPayableTransactionObject<string>;

    getElectionsContract(): NonPayableTransactionObject<string>;

    getGuardiansRegistrationContract(): NonPayableTransactionObject<string>;

    getProtocolContract(): NonPayableTransactionObject<string>;

    getRewardsContract(): NonPayableTransactionObject<string>;

    getStakingContract(): NonPayableTransactionObject<string>;

    getStakingRewardsWallet(): NonPayableTransactionObject<string>;

    getSubscriptionsContract(): NonPayableTransactionObject<string>;

    guardianMetadata(arg0: string, arg1: string): NonPayableTransactionObject<string>;

    guardians(
      arg0: string,
    ): NonPayableTransactionObject<{
      orbsAddr: string;
      ip: string;
      name: string;
      website: string;
      contact: string;
      registrationTime: string;
      lastUpdateTime: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    ipToGuardian(arg0: string | number[]): NonPayableTransactionObject<string>;

    /**
     * Returns true if the caller is the current functionalOwner.
     */
    isFunctionalOwner(): NonPayableTransactionObject<boolean>;

    /**
     * Returns true if the caller is the current migrationOwner.
     */
    isMigrationOwner(): NonPayableTransactionObject<boolean>;

    lock(): NonPayableTransactionObject<void>;

    locked(): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current migrationOwner.
     */
    migrationOwner(): NonPayableTransactionObject<string>;

    orbsAddressToEthereumAddress(arg0: string): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without functionalOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current functionalOwner.     * NOTE: Renouncing functionalOwnership will leave the contract without an functionalOwner, thereby removing any functionality that is only available to the functionalOwner.
     */
    renounceFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Leaves the contract without migrationOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current migrationOwner.     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner, thereby removing any functionality that is only available to the migrationOwner.
     */
    renounceMigrationOwnership(): NonPayableTransactionObject<void>;

    setContractRegistry(_contractRegistry: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current functionalOwner to set the pendingOwner address.
     * @param newFunctionalOwner The address to transfer functionalOwnership to.
     */
    transferFunctionalOwnership(newFunctionalOwner: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current migrationOwner to set the pendingOwner address.
     * @param newMigrationOwner The address to transfer migrationOwnership to.
     */
    transferMigrationOwnership(newMigrationOwner: string): NonPayableTransactionObject<void>;

    unlock(): NonPayableTransactionObject<void>;

    /**
     * Called by a participant who wishes to register as a guardian
     */
    registerGuardian(
      ip: string | number[],
      orbsAddr: string,
      name: string,
      website: string,
      contact: string,
    ): NonPayableTransactionObject<void>;

    /**
     * Called by a participant who wishes to update its properties
     */
    updateGuardian(
      ip: string | number[],
      orbsAddr: string,
      name: string,
      website: string,
      contact: string,
    ): NonPayableTransactionObject<void>;

    updateGuardianIp(ip: string | number[]): NonPayableTransactionObject<void>;

    /**
     * Called by a prticipant to update additional guardian metadata properties.
     */
    setMetadata(key: string, value: string): NonPayableTransactionObject<void>;

    getMetadata(addr: string, key: string): NonPayableTransactionObject<string>;

    /**
     * Called by a participant who wishes to unregister
     */
    unregisterGuardian(): NonPayableTransactionObject<void>;

    /**
     * Returns a guardian's data Used also by the Election contract
     */
    getGuardianData(
      addr: string,
    ): NonPayableTransactionObject<{
      ip: string;
      orbsAddr: string;
      name: string;
      website: string;
      contact: string;
      registration_time: string;
      last_update_time: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    getGuardiansOrbsAddress(addrs: string[]): NonPayableTransactionObject<string[]>;

    getGuardianIp(addr: string): NonPayableTransactionObject<string>;

    getGuardianIps(addrs: string[]): NonPayableTransactionObject<string[]>;

    isRegistered(addr: string): NonPayableTransactionObject<boolean>;

    resolveGuardianAddress(ethereumOrOrbsAddress: string): NonPayableTransactionObject<string>;

    /**
     * Translates a list guardians Ethereum addresses to Orbs addresses Used by the Election conract
     */
    getOrbsAddresses(ethereumAddrs: string[]): NonPayableTransactionObject<string[]>;

    /**
     * Translates a list guardians Orbs addresses to Ethereum addresses Used by the Election contract
     */
    getEthereumAddresses(orbsAddrs: string[]): NonPayableTransactionObject<string[]>;
  };
  events: {
    ContractRegistryAddressUpdated(cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;
    ContractRegistryAddressUpdated(options?: EventOptions, cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;

    FunctionalOwnershipTransferred(cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;
    FunctionalOwnershipTransferred(options?: EventOptions, cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;

    GuardianDataUpdated(cb?: Callback<GuardianDataUpdated>): EventEmitter;
    GuardianDataUpdated(options?: EventOptions, cb?: Callback<GuardianDataUpdated>): EventEmitter;

    GuardianMetadataChanged(cb?: Callback<GuardianMetadataChanged>): EventEmitter;
    GuardianMetadataChanged(options?: EventOptions, cb?: Callback<GuardianMetadataChanged>): EventEmitter;

    GuardianRegistered(cb?: Callback<GuardianRegistered>): EventEmitter;
    GuardianRegistered(options?: EventOptions, cb?: Callback<GuardianRegistered>): EventEmitter;

    GuardianUnregistered(cb?: Callback<GuardianUnregistered>): EventEmitter;
    GuardianUnregistered(options?: EventOptions, cb?: Callback<GuardianUnregistered>): EventEmitter;

    Locked(cb?: Callback<Locked>): EventEmitter;
    Locked(options?: EventOptions, cb?: Callback<Locked>): EventEmitter;

    MigrationOwnershipTransferred(cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;
    MigrationOwnershipTransferred(options?: EventOptions, cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;

    Unlocked(cb?: Callback<Unlocked>): EventEmitter;
    Unlocked(options?: EventOptions, cb?: Callback<Unlocked>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'ContractRegistryAddressUpdated', cb: Callback<ContractRegistryAddressUpdated>): void;
  once(
    event: 'ContractRegistryAddressUpdated',
    options: EventOptions,
    cb: Callback<ContractRegistryAddressUpdated>,
  ): void;

  once(event: 'FunctionalOwnershipTransferred', cb: Callback<FunctionalOwnershipTransferred>): void;
  once(
    event: 'FunctionalOwnershipTransferred',
    options: EventOptions,
    cb: Callback<FunctionalOwnershipTransferred>,
  ): void;

  once(event: 'GuardianDataUpdated', cb: Callback<GuardianDataUpdated>): void;
  once(event: 'GuardianDataUpdated', options: EventOptions, cb: Callback<GuardianDataUpdated>): void;

  once(event: 'GuardianMetadataChanged', cb: Callback<GuardianMetadataChanged>): void;
  once(event: 'GuardianMetadataChanged', options: EventOptions, cb: Callback<GuardianMetadataChanged>): void;

  once(event: 'GuardianRegistered', cb: Callback<GuardianRegistered>): void;
  once(event: 'GuardianRegistered', options: EventOptions, cb: Callback<GuardianRegistered>): void;

  once(event: 'GuardianUnregistered', cb: Callback<GuardianUnregistered>): void;
  once(event: 'GuardianUnregistered', options: EventOptions, cb: Callback<GuardianUnregistered>): void;

  once(event: 'Locked', cb: Callback<Locked>): void;
  once(event: 'Locked', options: EventOptions, cb: Callback<Locked>): void;

  once(event: 'MigrationOwnershipTransferred', cb: Callback<MigrationOwnershipTransferred>): void;
  once(
    event: 'MigrationOwnershipTransferred',
    options: EventOptions,
    cb: Callback<MigrationOwnershipTransferred>,
  ): void;

  once(event: 'Unlocked', cb: Callback<Unlocked>): void;
  once(event: 'Unlocked', options: EventOptions, cb: Callback<Unlocked>): void;
}
