/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AcceptedMigration = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface IMigratableStakingContract extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IMigratableStakingContract;
  clone(): IMigratableStakingContract;
  methods: {
    /**
     * Returns the address of the underlying staked token.
     * @returns IERC20 The address of the token.
     */
    getToken(): NonPayableTransactionObject<string>;

    /**
     * Stakes ORBS tokens on behalf of msg.sender. This method assumes that the user has already approved at least the required amount using ERC20 approve.
     * @param _amount uint256 The number of tokens to stake.
     * @param _stakeOwner address The specified stake owner.
     */
    acceptMigration(_stakeOwner: string, _amount: number | string): NonPayableTransactionObject<void>;
  };
  events: {
    AcceptedMigration(cb?: Callback<AcceptedMigration>): EventEmitter;
    AcceptedMigration(options?: EventOptions, cb?: Callback<AcceptedMigration>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'AcceptedMigration', cb: Callback<AcceptedMigration>): void;
  once(event: 'AcceptedMigration', options: EventOptions, cb: Callback<AcceptedMigration>): void;
}
