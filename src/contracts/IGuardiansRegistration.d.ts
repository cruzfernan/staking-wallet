/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GuardianDataUpdated = ContractEventLog<{
  addr: string;
  ip: string;
  orbsAddr: string;
  name: string;
  website: string;
  contact: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type GuardianMetadataChanged = ContractEventLog<{
  addr: string;
  key: string;
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type GuardianRegistered = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type GuardianUnregistered = ContractEventLog<{
  addr: string;
  0: string;
}>;

export interface IGuardiansRegistration extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IGuardiansRegistration;
  clone(): IGuardiansRegistration;
  methods: {
    /**
     * Called by a participant who wishes to register as a guardian
     */
    registerGuardian(
      ip: string | number[],
      orbsAddr: string,
      name: string,
      website: string,
      contact: string,
    ): NonPayableTransactionObject<void>;

    /**
     * Called by a participant who wishes to update its propertires
     */
    updateGuardian(
      ip: string | number[],
      orbsAddr: string,
      name: string,
      website: string,
      contact: string,
    ): NonPayableTransactionObject<void>;

    /**
     * Called by a participant who wishes to update its IP address (can be call by both main and Orbs addresses)
     */
    updateGuardianIp(ip: string | number[]): NonPayableTransactionObject<void>;

    /**
     * Called by a participant to update additional guardian metadata properties.
     */
    setMetadata(key: string, value: string): NonPayableTransactionObject<void>;

    /**
     * Called by a participant to get additional guardian metadata properties.
     */
    getMetadata(addr: string, key: string): NonPayableTransactionObject<string>;

    /**
     * Called by a participant who wishes to unregister
     */
    unregisterGuardian(): NonPayableTransactionObject<void>;

    /**
     * Returns a guardian's data Used also by the Election contract
     */
    getGuardianData(
      addr: string,
    ): NonPayableTransactionObject<{
      ip: string;
      orbsAddr: string;
      name: string;
      website: string;
      contact: string;
      registration_time: string;
      last_update_time: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    /**
     * Returns the Orbs addresses of a list of guardians Used also by the committee contract
     */
    getGuardiansOrbsAddress(addrs: string[]): NonPayableTransactionObject<string[]>;

    /**
     * Returns a guardian's ip Used also by the Election contract
     */
    getGuardianIp(addr: string): NonPayableTransactionObject<string>;

    /**
     * Returns guardian ips
     */
    getGuardianIps(addr: string[]): NonPayableTransactionObject<string[]>;

    /**
     * Returns true if the given address is of a registered guardian Used also by the Election contract
     */
    isRegistered(addr: string): NonPayableTransactionObject<boolean>;

    /**
     * Translates a list guardians Ethereum addresses to Orbs addresses Used by the Election contract
     */
    getOrbsAddresses(ethereumAddrs: string[]): NonPayableTransactionObject<string[]>;

    /**
     * Translates a list guardians Orbs addresses to Ethereum addresses Used by the Election contract
     */
    getEthereumAddresses(orbsAddrs: string[]): NonPayableTransactionObject<string[]>;

    /**
     * Resolves the ethereum address for a guardian, given an Ethereum/Orbs address
     */
    resolveGuardianAddress(ethereumOrOrbsAddress: string): NonPayableTransactionObject<string>;
  };
  events: {
    GuardianDataUpdated(cb?: Callback<GuardianDataUpdated>): EventEmitter;
    GuardianDataUpdated(options?: EventOptions, cb?: Callback<GuardianDataUpdated>): EventEmitter;

    GuardianMetadataChanged(cb?: Callback<GuardianMetadataChanged>): EventEmitter;
    GuardianMetadataChanged(options?: EventOptions, cb?: Callback<GuardianMetadataChanged>): EventEmitter;

    GuardianRegistered(cb?: Callback<GuardianRegistered>): EventEmitter;
    GuardianRegistered(options?: EventOptions, cb?: Callback<GuardianRegistered>): EventEmitter;

    GuardianUnregistered(cb?: Callback<GuardianUnregistered>): EventEmitter;
    GuardianUnregistered(options?: EventOptions, cb?: Callback<GuardianUnregistered>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'GuardianDataUpdated', cb: Callback<GuardianDataUpdated>): void;
  once(event: 'GuardianDataUpdated', options: EventOptions, cb: Callback<GuardianDataUpdated>): void;

  once(event: 'GuardianMetadataChanged', cb: Callback<GuardianMetadataChanged>): void;
  once(event: 'GuardianMetadataChanged', options: EventOptions, cb: Callback<GuardianMetadataChanged>): void;

  once(event: 'GuardianRegistered', cb: Callback<GuardianRegistered>): void;
  once(event: 'GuardianRegistered', options: EventOptions, cb: Callback<GuardianRegistered>): void;

  once(event: 'GuardianUnregistered', cb: Callback<GuardianUnregistered>): void;
  once(event: 'GuardianUnregistered', options: EventOptions, cb: Callback<GuardianUnregistered>): void;
}
