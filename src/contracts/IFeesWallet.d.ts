/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type EmergencyWithdrawal = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type FeesAddedToBucket = ContractEventLog<{
  bucketId: string;
  added: string;
  total: string;
  0: string;
  1: string;
  2: string;
}>;
export type FeesWithdrawnFromBucket = ContractEventLog<{
  bucketId: string;
  withdrawn: string;
  total: string;
  0: string;
  1: string;
  2: string;
}>;

export interface IFeesWallet extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IFeesWallet;
  clone(): IFeesWallet;
  methods: {
    /**
     * collect fees from the buckets since the last call and transfers the amount back. Called by: only Rewards contract.
     */
    collectFees(): NonPayableTransactionObject<string>;

    /**
     * Called by: subscriptions contract. Top-ups the fee pool with the given amount at the given rate (typically called by the subscriptions contract).
     */
    fillFeeBuckets(
      amount: number | string,
      monthlyRate: number | string,
      fromTimestamp: number | string,
    ): NonPayableTransactionObject<void>;

    /**
     * Called by the old FeesWallet contract. Part of the IMigratableFeesWallet interface.
     */
    acceptBucketMigration(bucketStartTime: number | string, amount: number | string): NonPayableTransactionObject<void>;

    /**
     * Updates the address of the contract registry.
     */
    setContractRegistry(_contractRegistry: string): NonPayableTransactionObject<void>;

    /**
     * migrates the fees of bucket starting at startTimestamp. bucketStartTime must be a bucket's start time. Calls acceptBucketMigration in the destination contract.
     */
    migrateBucket(destination: string, bucketStartTime: number | string): NonPayableTransactionObject<void>;

    /**
     * an emergency withdrawal enables withdrawal of all funds to an escrow account. To be use in emergencies only.
     */
    emergencyWithdraw(): NonPayableTransactionObject<void>;
  };
  events: {
    EmergencyWithdrawal(cb?: Callback<EmergencyWithdrawal>): EventEmitter;
    EmergencyWithdrawal(options?: EventOptions, cb?: Callback<EmergencyWithdrawal>): EventEmitter;

    FeesAddedToBucket(cb?: Callback<FeesAddedToBucket>): EventEmitter;
    FeesAddedToBucket(options?: EventOptions, cb?: Callback<FeesAddedToBucket>): EventEmitter;

    FeesWithdrawnFromBucket(cb?: Callback<FeesWithdrawnFromBucket>): EventEmitter;
    FeesWithdrawnFromBucket(options?: EventOptions, cb?: Callback<FeesWithdrawnFromBucket>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'EmergencyWithdrawal', cb: Callback<EmergencyWithdrawal>): void;
  once(event: 'EmergencyWithdrawal', options: EventOptions, cb: Callback<EmergencyWithdrawal>): void;

  once(event: 'FeesAddedToBucket', cb: Callback<FeesAddedToBucket>): void;
  once(event: 'FeesAddedToBucket', options: EventOptions, cb: Callback<FeesAddedToBucket>): void;

  once(event: 'FeesWithdrawnFromBucket', cb: Callback<FeesWithdrawnFromBucket>): void;
  once(event: 'FeesWithdrawnFromBucket', options: EventOptions, cb: Callback<FeesWithdrawnFromBucket>): void;
}
