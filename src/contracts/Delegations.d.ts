/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ContractRegistryAddressUpdated = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type Delegated = ContractEventLog<{
  from: string;
  to: string;
  0: string;
  1: string;
}>;
export type DelegatedStakeChanged = ContractEventLog<{
  addr: string;
  selfDelegatedStake: string;
  delegatedStake: string;
  delegators: string[];
  delegatorTotalStakes: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
  4: string[];
}>;
export type DelegationImportFinalized = ContractEventLog<{}>;
export type DelegationsImported = ContractEventLog<{
  from: string[];
  to: string[];
  notifiedElections: boolean;
  0: string[];
  1: string[];
  2: boolean;
}>;
export type FunctionalOwnershipTransferred = ContractEventLog<{
  previousFunctionalOwner: string;
  newFunctionalOwner: string;
  0: string;
  1: string;
}>;
export type Locked = ContractEventLog<{}>;
export type MigrationOwnershipTransferred = ContractEventLog<{
  previousMigrationOwner: string;
  newMigrationOwner: string;
  0: string;
  1: string;
}>;
export type Unlocked = ContractEventLog<{}>;

export interface Delegations extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): Delegations;
  clone(): Delegations;
  methods: {
    /**
     * Allows the pendingFunctionalOwner address to finalize the transfer.
     */
    claimFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Allows the pendingMigrationOwner address to finalize the transfer.
     */
    claimMigrationOwnership(): NonPayableTransactionObject<void>;

    delegationImportFinalized(): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current functionalOwner.
     */
    functionalOwner(): NonPayableTransactionObject<string>;

    getBootstrapRewardsWallet(): NonPayableTransactionObject<string>;

    getCertificationContract(): NonPayableTransactionObject<string>;

    getCommitteeContract(): NonPayableTransactionObject<string>;

    getDelegationsContract(): NonPayableTransactionObject<string>;

    getElectionsContract(): NonPayableTransactionObject<string>;

    getGuardiansRegistrationContract(): NonPayableTransactionObject<string>;

    getProtocolContract(): NonPayableTransactionObject<string>;

    getRewardsContract(): NonPayableTransactionObject<string>;

    getStakingContract(): NonPayableTransactionObject<string>;

    getStakingRewardsWallet(): NonPayableTransactionObject<string>;

    getSubscriptionsContract(): NonPayableTransactionObject<string>;

    /**
     * Returns true if the caller is the current functionalOwner.
     */
    isFunctionalOwner(): NonPayableTransactionObject<boolean>;

    /**
     * Returns true if the caller is the current migrationOwner.
     */
    isMigrationOwner(): NonPayableTransactionObject<boolean>;

    lock(): NonPayableTransactionObject<void>;

    locked(): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current migrationOwner.
     */
    migrationOwner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without functionalOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current functionalOwner.     * NOTE: Renouncing functionalOwnership will leave the contract without an functionalOwner, thereby removing any functionality that is only available to the functionalOwner.
     */
    renounceFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Leaves the contract without migrationOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current migrationOwner.     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner, thereby removing any functionality that is only available to the migrationOwner.
     */
    renounceMigrationOwnership(): NonPayableTransactionObject<void>;

    setContractRegistry(_contractRegistry: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current functionalOwner to set the pendingOwner address.
     * @param newFunctionalOwner The address to transfer functionalOwnership to.
     */
    transferFunctionalOwnership(newFunctionalOwner: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current migrationOwner to set the pendingOwner address.
     * @param newMigrationOwner The address to transfer migrationOwnership to.
     */
    transferMigrationOwnership(newMigrationOwner: string): NonPayableTransactionObject<void>;

    unlock(): NonPayableTransactionObject<void>;

    getTotalDelegatedStake(): NonPayableTransactionObject<string>;

    delegate(to: string): NonPayableTransactionObject<void>;

    importDelegations(
      from: string[],
      to: string[],
      refreshStakeNotification: boolean,
    ): NonPayableTransactionObject<void>;

    finalizeDelegationImport(): NonPayableTransactionObject<void>;

    refreshStakeNotification(addr: string): NonPayableTransactionObject<void>;

    refreshStake(addr: string): NonPayableTransactionObject<void>;

    stakeChange(
      _stakeOwner: string,
      arg1: number | string,
      arg2: boolean,
      _updatedStake: number | string,
    ): NonPayableTransactionObject<void>;

    stakeChangeBatch(
      _stakeOwners: string[],
      _amounts: (number | string)[],
      _signs: boolean[],
      _updatedStakes: (number | string)[],
    ): NonPayableTransactionObject<void>;

    getDelegation(addr: string): NonPayableTransactionObject<string>;

    stakeMigration(_stakeOwner: string, _amount: number | string): NonPayableTransactionObject<void>;

    getDelegatedStakes(addr: string): NonPayableTransactionObject<string>;

    getSelfDelegatedStake(addr: string): NonPayableTransactionObject<string>;
  };
  events: {
    ContractRegistryAddressUpdated(cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;
    ContractRegistryAddressUpdated(options?: EventOptions, cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;

    Delegated(cb?: Callback<Delegated>): EventEmitter;
    Delegated(options?: EventOptions, cb?: Callback<Delegated>): EventEmitter;

    DelegatedStakeChanged(cb?: Callback<DelegatedStakeChanged>): EventEmitter;
    DelegatedStakeChanged(options?: EventOptions, cb?: Callback<DelegatedStakeChanged>): EventEmitter;

    DelegationImportFinalized(cb?: Callback<DelegationImportFinalized>): EventEmitter;
    DelegationImportFinalized(options?: EventOptions, cb?: Callback<DelegationImportFinalized>): EventEmitter;

    DelegationsImported(cb?: Callback<DelegationsImported>): EventEmitter;
    DelegationsImported(options?: EventOptions, cb?: Callback<DelegationsImported>): EventEmitter;

    FunctionalOwnershipTransferred(cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;
    FunctionalOwnershipTransferred(options?: EventOptions, cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;

    Locked(cb?: Callback<Locked>): EventEmitter;
    Locked(options?: EventOptions, cb?: Callback<Locked>): EventEmitter;

    MigrationOwnershipTransferred(cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;
    MigrationOwnershipTransferred(options?: EventOptions, cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;

    Unlocked(cb?: Callback<Unlocked>): EventEmitter;
    Unlocked(options?: EventOptions, cb?: Callback<Unlocked>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'ContractRegistryAddressUpdated', cb: Callback<ContractRegistryAddressUpdated>): void;
  once(
    event: 'ContractRegistryAddressUpdated',
    options: EventOptions,
    cb: Callback<ContractRegistryAddressUpdated>,
  ): void;

  once(event: 'Delegated', cb: Callback<Delegated>): void;
  once(event: 'Delegated', options: EventOptions, cb: Callback<Delegated>): void;

  once(event: 'DelegatedStakeChanged', cb: Callback<DelegatedStakeChanged>): void;
  once(event: 'DelegatedStakeChanged', options: EventOptions, cb: Callback<DelegatedStakeChanged>): void;

  once(event: 'DelegationImportFinalized', cb: Callback<DelegationImportFinalized>): void;
  once(event: 'DelegationImportFinalized', options: EventOptions, cb: Callback<DelegationImportFinalized>): void;

  once(event: 'DelegationsImported', cb: Callback<DelegationsImported>): void;
  once(event: 'DelegationsImported', options: EventOptions, cb: Callback<DelegationsImported>): void;

  once(event: 'FunctionalOwnershipTransferred', cb: Callback<FunctionalOwnershipTransferred>): void;
  once(
    event: 'FunctionalOwnershipTransferred',
    options: EventOptions,
    cb: Callback<FunctionalOwnershipTransferred>,
  ): void;

  once(event: 'Locked', cb: Callback<Locked>): void;
  once(event: 'Locked', options: EventOptions, cb: Callback<Locked>): void;

  once(event: 'MigrationOwnershipTransferred', cb: Callback<MigrationOwnershipTransferred>): void;
  once(
    event: 'MigrationOwnershipTransferred',
    options: EventOptions,
    cb: Callback<MigrationOwnershipTransferred>,
  ): void;

  once(event: 'Unlocked', cb: Callback<Unlocked>): void;
  once(event: 'Unlocked', options: EventOptions, cb: Callback<Unlocked>): void;
}
