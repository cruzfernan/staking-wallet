/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface IStakeChangeNotifier extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IStakeChangeNotifier;
  clone(): IStakeChangeNotifier;
  methods: {
    /**
     * Notifies of stake change event.
     * @param _amount uint256 The difference in the total staked amount.
     * @param _sign bool The sign of the added (true) or subtracted (false) amount.
     * @param _stakeOwner address The address of the subject stake owner.
     * @param _updatedStake uint256 The updated total staked amount.
     */
    stakeChange(
      _stakeOwner: string,
      _amount: number | string,
      _sign: boolean,
      _updatedStake: number | string,
    ): NonPayableTransactionObject<void>;

    /**
     * Notifies of multiple stake change events.
     * @param _amounts uint256[] The differences in total staked amounts.
     * @param _signs bool[] The signs of the added (true) or subtracted (false) amounts.
     * @param _stakeOwners address[] The addresses of subject stake owners.
     * @param _updatedStakes uint256[] The updated total staked amounts.
     */
    stakeChangeBatch(
      _stakeOwners: string[],
      _amounts: (number | string)[],
      _signs: boolean[],
      _updatedStakes: (number | string)[],
    ): NonPayableTransactionObject<void>;

    /**
     * Notifies of stake migration event.
     * @param _amount uint256 The migrated amount.
     * @param _stakeOwner address The address of the subject stake owner.
     */
    stakeMigration(_stakeOwner: string, _amount: number | string): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
