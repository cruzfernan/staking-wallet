/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GuardianStatusUpdated = ContractEventLog<{
  addr: string;
  readyToSync: boolean;
  readyForCommittee: boolean;
  0: string;
  1: boolean;
  2: boolean;
}>;
export type GuardianVotedIn = ContractEventLog<{
  guardian: string;
  0: string;
}>;
export type GuardianVotedOut = ContractEventLog<{
  guardian: string;
  0: string;
}>;
export type GuardianVotedUnready = ContractEventLog<{
  guardian: string;
  0: string;
}>;
export type MinSelfStakePercentMilleChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type StakeChanged = ContractEventLog<{
  addr: string;
  selfStake: string;
  delegated_stake: string;
  effective_stake: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type VoteOutCasted = ContractEventLog<{
  voter: string;
  subjects: string[];
  0: string;
  1: string[];
}>;
export type VoteOutLockTimeoutSecondsChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type VoteOutPercentageThresholdChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type VoteUnreadyCasted = ContractEventLog<{
  voter: string;
  subject: string;
  0: string;
  1: string;
}>;
export type VoteUnreadyPercentageThresholdChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type VoteUnreadyTimeoutSecondsChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;

export interface IElections extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IElections;
  clone(): IElections;
  methods: {
    /**
     * Called by a guardian as part of the automatic vote unready flow
     */
    voteUnready(subject_addr: string): NonPayableTransactionObject<void>;

    /**
     * Called by a guardian as part of the vote-out flow
     */
    voteOut(subject_addrs: string[]): NonPayableTransactionObject<void>;

    /**
     * Called by a guardian when ready to join the committee, typically after syncing is complete or after being voted unready
     */
    readyForSync(): NonPayableTransactionObject<void>;

    /**
     * Called by a guardian when ready to join the committee, typically after syncing is complete or after being voted unready
     */
    readyForCommittee(): NonPayableTransactionObject<void>;

    /**
     * Called by: delegation contract Notifies a delegated stake change event total_delegated_stake = 0 if addr delegates to another guardian
     */
    delegatedStakeChange(
      addr: string,
      selfStake: number | string,
      total_delegated: number | string,
      delta_total_delegated: number | string,
      sign_total_delegated: boolean,
    ): NonPayableTransactionObject<void>;

    /**
     * Called by: guardian registration contract Notifies a new guardian was registered
     */
    guardianRegistered(addr: string): NonPayableTransactionObject<void>;

    /**
     * Called by: guardian registration contract Notifies a new guardian was unregistered
     */
    guardianUnregistered(addr: string): NonPayableTransactionObject<void>;

    /**
     * Called by: guardian registration contract Notifies on a guardian certification change
     */
    guardianCertificationChanged(addr: string, isCertified: boolean): NonPayableTransactionObject<void>;

    /**
     * Updates the address calldata of the contract registry
     */
    setContractRegistry(_contractRegistry: string): NonPayableTransactionObject<void>;
  };
  events: {
    GuardianStatusUpdated(cb?: Callback<GuardianStatusUpdated>): EventEmitter;
    GuardianStatusUpdated(options?: EventOptions, cb?: Callback<GuardianStatusUpdated>): EventEmitter;

    GuardianVotedIn(cb?: Callback<GuardianVotedIn>): EventEmitter;
    GuardianVotedIn(options?: EventOptions, cb?: Callback<GuardianVotedIn>): EventEmitter;

    GuardianVotedOut(cb?: Callback<GuardianVotedOut>): EventEmitter;
    GuardianVotedOut(options?: EventOptions, cb?: Callback<GuardianVotedOut>): EventEmitter;

    GuardianVotedUnready(cb?: Callback<GuardianVotedUnready>): EventEmitter;
    GuardianVotedUnready(options?: EventOptions, cb?: Callback<GuardianVotedUnready>): EventEmitter;

    MinSelfStakePercentMilleChanged(cb?: Callback<MinSelfStakePercentMilleChanged>): EventEmitter;
    MinSelfStakePercentMilleChanged(
      options?: EventOptions,
      cb?: Callback<MinSelfStakePercentMilleChanged>,
    ): EventEmitter;

    StakeChanged(cb?: Callback<StakeChanged>): EventEmitter;
    StakeChanged(options?: EventOptions, cb?: Callback<StakeChanged>): EventEmitter;

    VoteOutCasted(cb?: Callback<VoteOutCasted>): EventEmitter;
    VoteOutCasted(options?: EventOptions, cb?: Callback<VoteOutCasted>): EventEmitter;

    VoteOutLockTimeoutSecondsChanged(cb?: Callback<VoteOutLockTimeoutSecondsChanged>): EventEmitter;
    VoteOutLockTimeoutSecondsChanged(
      options?: EventOptions,
      cb?: Callback<VoteOutLockTimeoutSecondsChanged>,
    ): EventEmitter;

    VoteOutPercentageThresholdChanged(cb?: Callback<VoteOutPercentageThresholdChanged>): EventEmitter;
    VoteOutPercentageThresholdChanged(
      options?: EventOptions,
      cb?: Callback<VoteOutPercentageThresholdChanged>,
    ): EventEmitter;

    VoteUnreadyCasted(cb?: Callback<VoteUnreadyCasted>): EventEmitter;
    VoteUnreadyCasted(options?: EventOptions, cb?: Callback<VoteUnreadyCasted>): EventEmitter;

    VoteUnreadyPercentageThresholdChanged(cb?: Callback<VoteUnreadyPercentageThresholdChanged>): EventEmitter;
    VoteUnreadyPercentageThresholdChanged(
      options?: EventOptions,
      cb?: Callback<VoteUnreadyPercentageThresholdChanged>,
    ): EventEmitter;

    VoteUnreadyTimeoutSecondsChanged(cb?: Callback<VoteUnreadyTimeoutSecondsChanged>): EventEmitter;
    VoteUnreadyTimeoutSecondsChanged(
      options?: EventOptions,
      cb?: Callback<VoteUnreadyTimeoutSecondsChanged>,
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'GuardianStatusUpdated', cb: Callback<GuardianStatusUpdated>): void;
  once(event: 'GuardianStatusUpdated', options: EventOptions, cb: Callback<GuardianStatusUpdated>): void;

  once(event: 'GuardianVotedIn', cb: Callback<GuardianVotedIn>): void;
  once(event: 'GuardianVotedIn', options: EventOptions, cb: Callback<GuardianVotedIn>): void;

  once(event: 'GuardianVotedOut', cb: Callback<GuardianVotedOut>): void;
  once(event: 'GuardianVotedOut', options: EventOptions, cb: Callback<GuardianVotedOut>): void;

  once(event: 'GuardianVotedUnready', cb: Callback<GuardianVotedUnready>): void;
  once(event: 'GuardianVotedUnready', options: EventOptions, cb: Callback<GuardianVotedUnready>): void;

  once(event: 'MinSelfStakePercentMilleChanged', cb: Callback<MinSelfStakePercentMilleChanged>): void;
  once(
    event: 'MinSelfStakePercentMilleChanged',
    options: EventOptions,
    cb: Callback<MinSelfStakePercentMilleChanged>,
  ): void;

  once(event: 'StakeChanged', cb: Callback<StakeChanged>): void;
  once(event: 'StakeChanged', options: EventOptions, cb: Callback<StakeChanged>): void;

  once(event: 'VoteOutCasted', cb: Callback<VoteOutCasted>): void;
  once(event: 'VoteOutCasted', options: EventOptions, cb: Callback<VoteOutCasted>): void;

  once(event: 'VoteOutLockTimeoutSecondsChanged', cb: Callback<VoteOutLockTimeoutSecondsChanged>): void;
  once(
    event: 'VoteOutLockTimeoutSecondsChanged',
    options: EventOptions,
    cb: Callback<VoteOutLockTimeoutSecondsChanged>,
  ): void;

  once(event: 'VoteOutPercentageThresholdChanged', cb: Callback<VoteOutPercentageThresholdChanged>): void;
  once(
    event: 'VoteOutPercentageThresholdChanged',
    options: EventOptions,
    cb: Callback<VoteOutPercentageThresholdChanged>,
  ): void;

  once(event: 'VoteUnreadyCasted', cb: Callback<VoteUnreadyCasted>): void;
  once(event: 'VoteUnreadyCasted', options: EventOptions, cb: Callback<VoteUnreadyCasted>): void;

  once(event: 'VoteUnreadyPercentageThresholdChanged', cb: Callback<VoteUnreadyPercentageThresholdChanged>): void;
  once(
    event: 'VoteUnreadyPercentageThresholdChanged',
    options: EventOptions,
    cb: Callback<VoteUnreadyPercentageThresholdChanged>,
  ): void;

  once(event: 'VoteUnreadyTimeoutSecondsChanged', cb: Callback<VoteUnreadyTimeoutSecondsChanged>): void;
  once(
    event: 'VoteUnreadyTimeoutSecondsChanged',
    options: EventOptions,
    cb: Callback<VoteUnreadyTimeoutSecondsChanged>,
  ): void;
}
