/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AcceptedMigration = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type EmergencyManagerUpdated = ContractEventLog<{
  emergencyManager: string;
  0: string;
}>;
export type MigratedStake = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type MigrationDestinationAdded = ContractEventLog<{
  stakingContract: string;
  0: string;
}>;
export type MigrationDestinationRemoved = ContractEventLog<{
  stakingContract: string;
  0: string;
}>;
export type MigrationManagerUpdated = ContractEventLog<{
  migrationManager: string;
  0: string;
}>;
export type ReleasedAllStakes = ContractEventLog<{}>;
export type Restaked = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type StakeChangeNotifierUpdated = ContractEventLog<{
  notifier: string;
  0: string;
}>;
export type Staked = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type StoppedAcceptingNewStake = ContractEventLog<{}>;
export type Unstaked = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdrew = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface StakingContract extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): StakingContract;
  clone(): StakingContract;
  methods: {
    MAX_APPROVED_STAKING_CONTRACTS(): NonPayableTransactionObject<string>;

    VERSION(): NonPayableTransactionObject<string>;

    acceptingNewStakes(): NonPayableTransactionObject<boolean>;

    approvedStakingContracts(arg0: number | string): NonPayableTransactionObject<string>;

    cooldownPeriodInSec(): NonPayableTransactionObject<string>;

    emergencyManager(): NonPayableTransactionObject<string>;

    migrationManager(): NonPayableTransactionObject<string>;

    notifier(): NonPayableTransactionObject<string>;

    releasingAllStakes(): NonPayableTransactionObject<boolean>;

    /**
     * Sets the address of the migration manager.
     * @param _newMigrationManager address The address of the new migration manager.
     */
    setMigrationManager(_newMigrationManager: string): NonPayableTransactionObject<void>;

    /**
     * Sets the address of the emergency manager.
     * @param _newEmergencyManager address The address of the new emergency manager.
     */
    setEmergencyManager(_newEmergencyManager: string): NonPayableTransactionObject<void>;

    /**
     * Sets the address of the stake change notifier contract.
     * @param _newNotifier IStakeChangeNotifier The address of the new stake change notifier contract.     /// Note: it's allowed to reset the notifier to a zero address.
     */
    setStakeChangeNotifier(_newNotifier: string): NonPayableTransactionObject<void>;

    /**
     * Adds a new contract to the list of approved staking contracts migration destinations.
     * @param _newStakingContract IMigratableStakingContract The new contract to add.
     */
    addMigrationDestination(_newStakingContract: string): NonPayableTransactionObject<void>;

    /**
     * Removes a contract from the list of approved staking contracts migration destinations.
     * @param _stakingContract IMigratableStakingContract The contract to remove.
     */
    removeMigrationDestination(_stakingContract: string): NonPayableTransactionObject<void>;

    /**
     * Unstakes ORBS tokens from msg.sender. If successful, this will start the cooldown period, after which msg.sender would be able to withdraw all of his tokens.
     * @param _amount uint256 The amount of tokens to unstake.
     */
    unstake(_amount: number | string): NonPayableTransactionObject<void>;

    /**
     * Restakes unstaked ORBS tokens (in or after cooldown) for msg.sender.
     */
    restake(): NonPayableTransactionObject<void>;

    /**
     * Stakes ORBS tokens on behalf of msg.sender. This method assumes that the user has already approved at least the required amount using ERC20 approve.
     * @param _amount uint256 The amount of tokens to stake.
     * @param _stakeOwner address The specified stake owner.
     */
    acceptMigration(_stakeOwner: string, _amount: number | string): NonPayableTransactionObject<void>;

    /**
     * Migrates the stake of msg.sender from this staking contract to a new approved staking contract.
     * @param _amount uint256 The amount of tokens to migrate.
     * @param _newStakingContract IMigratableStakingContract The new staking contract which supports stake migration.
     */
    migrateStakedTokens(_newStakingContract: string, _amount: number | string): NonPayableTransactionObject<void>;

    /**
     * Distributes staking rewards to a list of addresses by directly adding rewards to their stakes. This method assumes that the user has already approved at least the required amount using ERC20 approve. Since this is a convenience method, we aren't concerned about reaching block gas limit by using large lists. We assume that callers will be able to batch/paginate their requests properly.
     * @param _amounts uint256[] The amounts of the rewards.
     * @param _stakeOwners address[] The addresses of the stake owners.
     * @param _totalAmount uint256 The total amount of rewards to distributes.
     */
    distributeRewards(
      _totalAmount: number | string,
      _stakeOwners: string[],
      _amounts: (number | string)[],
    ): NonPayableTransactionObject<void>;

    /**
     * Returns the stake of the specified stake owner (excluding unstaked tokens).
     * @param _stakeOwner address The address to check.
     * @returns uint256 The stake of the stake owner.
     */
    getStakeBalanceOf(_stakeOwner: string): NonPayableTransactionObject<string>;

    /**
     * Returns the total amount staked tokens (excluding unstaked tokens).
     * @returns uint256 The total staked tokens of all stake owners.
     */
    getTotalStakedTokens(): NonPayableTransactionObject<string>;

    /**
     * Returns the time that the cooldown period ends (or ended) and the amount of tokens to be released.
     * @param _stakeOwner address The address to check.
     * @returns cooldownAmount uint256 The total tokens in cooldown.cooldownEndTime uint256 The time when the cooldown period ends (in seconds).
     */
    getUnstakeStatus(
      _stakeOwner: string,
    ): NonPayableTransactionObject<{
      cooldownAmount: string;
      cooldownEndTime: string;
      0: string;
      1: string;
    }>;

    /**
     * Returns the address of the underlying staked token.
     * @returns IERC20 The address of the token.
     */
    getToken(): NonPayableTransactionObject<string>;

    /**
     * Requests the contract to stop accepting new staking requests.
     */
    stopAcceptingNewStakes(): NonPayableTransactionObject<void>;

    /**
     * Requests the contract to release all stakes.
     */
    releaseAllStakes(): NonPayableTransactionObject<void>;

    /**
     * Requests withdraw of released tokens for a list of addresses.
     * @param _stakeOwners address[] The addresses of the stake owners.
     */
    withdrawReleasedStakes(_stakeOwners: string[]): NonPayableTransactionObject<void>;

    /**
     * Returns whether a specific staking contract was approved as a migration destination.
     * @param _stakingContract IMigratableStakingContract The staking contract to look for.
     * @returns exists bool The approval status.
     */
    isApprovedStakingContract(_stakingContract: string): NonPayableTransactionObject<boolean>;

    /**
     * Stakes ORBS tokens on behalf of msg.sender. This method assumes that the user has already approved at least the required amount using ERC20 approve.
     * @param _amount uint256 The amount of tokens to stake.
     */
    stake(_amount: number | string): NonPayableTransactionObject<void>;

    /**
     * Requests to withdraw all of staked ORBS tokens back to msg.sender. Stake owners can withdraw their ORBS tokens only after previously unstaking them and after the cooldown period has passed (unless the contract was requested to release all stakes).
     */
    withdraw(): NonPayableTransactionObject<void>;
  };
  events: {
    AcceptedMigration(cb?: Callback<AcceptedMigration>): EventEmitter;
    AcceptedMigration(options?: EventOptions, cb?: Callback<AcceptedMigration>): EventEmitter;

    EmergencyManagerUpdated(cb?: Callback<EmergencyManagerUpdated>): EventEmitter;
    EmergencyManagerUpdated(options?: EventOptions, cb?: Callback<EmergencyManagerUpdated>): EventEmitter;

    MigratedStake(cb?: Callback<MigratedStake>): EventEmitter;
    MigratedStake(options?: EventOptions, cb?: Callback<MigratedStake>): EventEmitter;

    MigrationDestinationAdded(cb?: Callback<MigrationDestinationAdded>): EventEmitter;
    MigrationDestinationAdded(options?: EventOptions, cb?: Callback<MigrationDestinationAdded>): EventEmitter;

    MigrationDestinationRemoved(cb?: Callback<MigrationDestinationRemoved>): EventEmitter;
    MigrationDestinationRemoved(options?: EventOptions, cb?: Callback<MigrationDestinationRemoved>): EventEmitter;

    MigrationManagerUpdated(cb?: Callback<MigrationManagerUpdated>): EventEmitter;
    MigrationManagerUpdated(options?: EventOptions, cb?: Callback<MigrationManagerUpdated>): EventEmitter;

    ReleasedAllStakes(cb?: Callback<ReleasedAllStakes>): EventEmitter;
    ReleasedAllStakes(options?: EventOptions, cb?: Callback<ReleasedAllStakes>): EventEmitter;

    Restaked(cb?: Callback<Restaked>): EventEmitter;
    Restaked(options?: EventOptions, cb?: Callback<Restaked>): EventEmitter;

    StakeChangeNotifierUpdated(cb?: Callback<StakeChangeNotifierUpdated>): EventEmitter;
    StakeChangeNotifierUpdated(options?: EventOptions, cb?: Callback<StakeChangeNotifierUpdated>): EventEmitter;

    Staked(cb?: Callback<Staked>): EventEmitter;
    Staked(options?: EventOptions, cb?: Callback<Staked>): EventEmitter;

    StoppedAcceptingNewStake(cb?: Callback<StoppedAcceptingNewStake>): EventEmitter;
    StoppedAcceptingNewStake(options?: EventOptions, cb?: Callback<StoppedAcceptingNewStake>): EventEmitter;

    Unstaked(cb?: Callback<Unstaked>): EventEmitter;
    Unstaked(options?: EventOptions, cb?: Callback<Unstaked>): EventEmitter;

    Withdrew(cb?: Callback<Withdrew>): EventEmitter;
    Withdrew(options?: EventOptions, cb?: Callback<Withdrew>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'AcceptedMigration', cb: Callback<AcceptedMigration>): void;
  once(event: 'AcceptedMigration', options: EventOptions, cb: Callback<AcceptedMigration>): void;

  once(event: 'EmergencyManagerUpdated', cb: Callback<EmergencyManagerUpdated>): void;
  once(event: 'EmergencyManagerUpdated', options: EventOptions, cb: Callback<EmergencyManagerUpdated>): void;

  once(event: 'MigratedStake', cb: Callback<MigratedStake>): void;
  once(event: 'MigratedStake', options: EventOptions, cb: Callback<MigratedStake>): void;

  once(event: 'MigrationDestinationAdded', cb: Callback<MigrationDestinationAdded>): void;
  once(event: 'MigrationDestinationAdded', options: EventOptions, cb: Callback<MigrationDestinationAdded>): void;

  once(event: 'MigrationDestinationRemoved', cb: Callback<MigrationDestinationRemoved>): void;
  once(event: 'MigrationDestinationRemoved', options: EventOptions, cb: Callback<MigrationDestinationRemoved>): void;

  once(event: 'MigrationManagerUpdated', cb: Callback<MigrationManagerUpdated>): void;
  once(event: 'MigrationManagerUpdated', options: EventOptions, cb: Callback<MigrationManagerUpdated>): void;

  once(event: 'ReleasedAllStakes', cb: Callback<ReleasedAllStakes>): void;
  once(event: 'ReleasedAllStakes', options: EventOptions, cb: Callback<ReleasedAllStakes>): void;

  once(event: 'Restaked', cb: Callback<Restaked>): void;
  once(event: 'Restaked', options: EventOptions, cb: Callback<Restaked>): void;

  once(event: 'StakeChangeNotifierUpdated', cb: Callback<StakeChangeNotifierUpdated>): void;
  once(event: 'StakeChangeNotifierUpdated', options: EventOptions, cb: Callback<StakeChangeNotifierUpdated>): void;

  once(event: 'Staked', cb: Callback<Staked>): void;
  once(event: 'Staked', options: EventOptions, cb: Callback<Staked>): void;

  once(event: 'StoppedAcceptingNewStake', cb: Callback<StoppedAcceptingNewStake>): void;
  once(event: 'StoppedAcceptingNewStake', options: EventOptions, cb: Callback<StoppedAcceptingNewStake>): void;

  once(event: 'Unstaked', cb: Callback<Unstaked>): void;
  once(event: 'Unstaked', options: EventOptions, cb: Callback<Unstaked>): void;

  once(event: 'Withdrew', cb: Callback<Withdrew>): void;
  once(event: 'Withdrew', options: EventOptions, cb: Callback<Withdrew>): void;
}
