/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ClientSet = ContractEventLog<{
  client: string;
  0: string;
}>;
export type EmergencyWithdrawal = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type FundsAddedToPool = ContractEventLog<{
  added: string;
  total: string;
  0: string;
  1: string;
}>;
export type MaxAnnualRateSet = ContractEventLog<{
  maxAnnualRate: string;
  0: string;
}>;
export type OutstandingTokensReset = ContractEventLog<{}>;

export interface IProtocolWallet extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IProtocolWallet;
  clone(): IProtocolWallet;
  methods: {
    /**
     * Returns the address of the underlying staked token.
     * @returns IERC20 The address of the token.
     */
    getToken(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the underlying staked token.
     * @returns IERC20 The address of the token.
     */
    getBalance(): NonPayableTransactionObject<string>;

    /**
     * Transfers the given amount of orbs tokens form the sender to this contract an update the pool.
     */
    topUp(amount: number | string): NonPayableTransactionObject<void>;

    /**
     * Withdraw from pool to a the sender's address, limited by the pool's MaxRate. A maximum of MaxRate x time period since the last Orbs transfer may be transferred out.
     */
    withdraw(amount: number | string): NonPayableTransactionObject<void>;

    /**
     * Sets a new transfer rate for the Orbs pool.
     */
    setMaxAnnualRate(annual_rate: number | string): NonPayableTransactionObject<void>;

    /**
     * transfer the entire pool's balance to a new wallet.
     */
    emergencyWithdraw(): NonPayableTransactionObject<void>;

    /**
     * sets the address of the new contract
     */
    setClient(client: string): NonPayableTransactionObject<void>;
  };
  events: {
    ClientSet(cb?: Callback<ClientSet>): EventEmitter;
    ClientSet(options?: EventOptions, cb?: Callback<ClientSet>): EventEmitter;

    EmergencyWithdrawal(cb?: Callback<EmergencyWithdrawal>): EventEmitter;
    EmergencyWithdrawal(options?: EventOptions, cb?: Callback<EmergencyWithdrawal>): EventEmitter;

    FundsAddedToPool(cb?: Callback<FundsAddedToPool>): EventEmitter;
    FundsAddedToPool(options?: EventOptions, cb?: Callback<FundsAddedToPool>): EventEmitter;

    MaxAnnualRateSet(cb?: Callback<MaxAnnualRateSet>): EventEmitter;
    MaxAnnualRateSet(options?: EventOptions, cb?: Callback<MaxAnnualRateSet>): EventEmitter;

    OutstandingTokensReset(cb?: Callback<OutstandingTokensReset>): EventEmitter;
    OutstandingTokensReset(options?: EventOptions, cb?: Callback<OutstandingTokensReset>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'ClientSet', cb: Callback<ClientSet>): void;
  once(event: 'ClientSet', options: EventOptions, cb: Callback<ClientSet>): void;

  once(event: 'EmergencyWithdrawal', cb: Callback<EmergencyWithdrawal>): void;
  once(event: 'EmergencyWithdrawal', options: EventOptions, cb: Callback<EmergencyWithdrawal>): void;

  once(event: 'FundsAddedToPool', cb: Callback<FundsAddedToPool>): void;
  once(event: 'FundsAddedToPool', options: EventOptions, cb: Callback<FundsAddedToPool>): void;

  once(event: 'MaxAnnualRateSet', cb: Callback<MaxAnnualRateSet>): void;
  once(event: 'MaxAnnualRateSet', options: EventOptions, cb: Callback<MaxAnnualRateSet>): void;

  once(event: 'OutstandingTokensReset', cb: Callback<OutstandingTokensReset>): void;
  once(event: 'OutstandingTokensReset', options: EventOptions, cb: Callback<OutstandingTokensReset>): void;
}
