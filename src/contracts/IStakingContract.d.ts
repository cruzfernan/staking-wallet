/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type MigratedStake = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Restaked = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Staked = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Unstaked = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdrew = ContractEventLog<{
  stakeOwner: string;
  amount: string;
  totalStakedAmount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface IStakingContract extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IStakingContract;
  clone(): IStakingContract;
  methods: {
    /**
     * Stakes ORBS tokens on behalf of msg.sender. This method assumes that the user has already approved at least the required amount using ERC20 approve.
     * @param _amount uint256 The amount of tokens to stake.
     */
    stake(_amount: number | string): NonPayableTransactionObject<void>;

    /**
     * Unstakes ORBS tokens from msg.sender. If successful, this will start the cooldown period, after which msg.sender would be able to withdraw all of his tokens.
     * @param _amount uint256 The amount of tokens to unstake.
     */
    unstake(_amount: number | string): NonPayableTransactionObject<void>;

    /**
     * Requests to withdraw all of staked ORBS tokens back to msg.sender. Stake owners can withdraw their ORBS tokens only after previously unstaking them and after the cooldown period has passed (unless the contract was requested to release all stakes).
     */
    withdraw(): NonPayableTransactionObject<void>;

    /**
     * Restakes unstaked ORBS tokens (in or after cooldown) for msg.sender.
     */
    restake(): NonPayableTransactionObject<void>;

    /**
     * Distributes staking rewards to a list of addresses by directly adding rewards to their stakes. This method assumes that the user has already approved at least the required amount using ERC20 approve. Since this is a convenience method, we aren't concerned about reaching block gas limit by using large lists. We assume that callers will be able to properly batch/paginate their requests.
     * @param _amounts uint256[] The amounts of the rewards.
     * @param _stakeOwners address[] The addresses of the stake owners.
     * @param _totalAmount uint256 The total amount of rewards to distributes.
     */
    distributeRewards(
      _totalAmount: number | string,
      _stakeOwners: string[],
      _amounts: (number | string)[],
    ): NonPayableTransactionObject<void>;

    /**
     * Returns the stake of the specified stake owner (excluding unstaked tokens).
     * @param _stakeOwner address The address to check.
     * @returns uint256 The total stake.
     */
    getStakeBalanceOf(_stakeOwner: string): NonPayableTransactionObject<string>;

    /**
     * Returns the total amount staked tokens (excluding unstaked tokens).
     * @returns uint256 The total staked tokens of all stake owners.
     */
    getTotalStakedTokens(): NonPayableTransactionObject<string>;

    /**
     * Returns the time that the cooldown period ends (or ended) and the amount of tokens to be released.
     * @param _stakeOwner address The address to check.
     * @returns cooldownAmount uint256 The total tokens in cooldown.cooldownEndTime uint256 The time when the cooldown period ends (in seconds).
     */
    getUnstakeStatus(
      _stakeOwner: string,
    ): NonPayableTransactionObject<{
      cooldownAmount: string;
      cooldownEndTime: string;
      0: string;
      1: string;
    }>;

    /**
     * Migrates the stake of msg.sender from this staking contract to a new approved staking contract.
     * @param _amount uint256 The amount of tokens to migrate.
     * @param _newStakingContract IMigratableStakingContract The new staking contract which supports stake migration.
     */
    migrateStakedTokens(_newStakingContract: string, _amount: number | string): NonPayableTransactionObject<void>;
  };
  events: {
    MigratedStake(cb?: Callback<MigratedStake>): EventEmitter;
    MigratedStake(options?: EventOptions, cb?: Callback<MigratedStake>): EventEmitter;

    Restaked(cb?: Callback<Restaked>): EventEmitter;
    Restaked(options?: EventOptions, cb?: Callback<Restaked>): EventEmitter;

    Staked(cb?: Callback<Staked>): EventEmitter;
    Staked(options?: EventOptions, cb?: Callback<Staked>): EventEmitter;

    Unstaked(cb?: Callback<Unstaked>): EventEmitter;
    Unstaked(options?: EventOptions, cb?: Callback<Unstaked>): EventEmitter;

    Withdrew(cb?: Callback<Withdrew>): EventEmitter;
    Withdrew(options?: EventOptions, cb?: Callback<Withdrew>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'MigratedStake', cb: Callback<MigratedStake>): void;
  once(event: 'MigratedStake', options: EventOptions, cb: Callback<MigratedStake>): void;

  once(event: 'Restaked', cb: Callback<Restaked>): void;
  once(event: 'Restaked', options: EventOptions, cb: Callback<Restaked>): void;

  once(event: 'Staked', cb: Callback<Staked>): void;
  once(event: 'Staked', options: EventOptions, cb: Callback<Staked>): void;

  once(event: 'Unstaked', cb: Callback<Unstaked>): void;
  once(event: 'Unstaked', options: EventOptions, cb: Callback<Unstaked>): void;

  once(event: 'Withdrew', cb: Callback<Withdrew>): void;
  once(event: 'Withdrew', options: EventOptions, cb: Callback<Withdrew>): void;
}
