/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BootstrapRewardsWithdrawn = ContractEventLog<{
  guardian: string;
  amount: string;
  0: string;
  1: string;
}>;
export type EmergencyWithdrawal = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type FeesWithdrawn = ContractEventLog<{
  guardian: string;
  amount: string;
  0: string;
  1: string;
}>;
export type MaxDelegatorsStakingRewardsChanged = ContractEventLog<{
  maxDelegatorsStakingRewardsPercentMille: string;
  0: string;
}>;
export type RewardsAssigned = ContractEventLog<{
  assignees: string[];
  stakingRewards: string[];
  fees: string[];
  bootstrapRewards: string[];
  0: string[];
  1: string[];
  2: string[];
  3: string[];
}>;
export type StakingRewardsDistributed = ContractEventLog<{
  distributer: string;
  fromBlock: string;
  toBlock: string;
  split: string;
  txIndex: string;
  to: string[];
  amounts: string[];
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string[];
  6: string[];
}>;

export interface IGuardiansWallet extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IGuardiansWallet;
  clone(): IGuardiansWallet;
  methods: {
    /**
     * Assigns rewards to the Guardians balances. Assumes approve of the funds transfer prior to the call
     */
    assignRewardsToGuardians(
      guardians: string[],
      stakingRewards: (number | string)[],
      fees: (number | string)[],
      bootstrapRewards: (number | string)[],
    ): NonPayableTransactionObject<void>;

    /**
     * Distributes msg.sender's orbs token rewards to a list of addresses, by transferring directly into the staking contract. Total delegators reward (addresses other than the Guardians) must be less than maxDelegatorsStakingRewardsPercentMille of total amount.
     */
    distributeStakingRewards(
      totalAmount: number | string,
      fromBlock: number | string,
      toBlock: number | string,
      split: number | string,
      txIndex: number | string,
      to: string[],
      amounts: (number | string)[],
    ): NonPayableTransactionObject<void>;

    /**
     * @returns Returns the currently unclaimed orbs token reward balance of the given address.
     */
    getStakingRewardBalance(addr: string): NonPayableTransactionObject<string>;

    /**
     * Transfer all of msg.sender's outstanding balance to the Guardian account. may be called with either the Guardian address or node address.
     */
    withdrawFees(): NonPayableTransactionObject<void>;

    /**
     * @returns Returns the currently unclaimed orbs token reward balance of the given address.
     */
    getFeeBalance(addr: string): NonPayableTransactionObject<string>;

    /**
     * Transfer all of msg.sender's outstanding balance to the Guardian account. may be called with either the Guardian address or node address.
     */
    withdrawBootstrapFunds(): NonPayableTransactionObject<void>;

    /**
     * @returns Returns the currently unclaimed bootstrap balance of the given address.
     */
    getBootstrapBalance(addr: string): NonPayableTransactionObject<string>;

    /**
     * the maximum percent that may be distributed to delegators, provided in milli-percent. For example: 66667 indicates that up to 2/3 of the rewards may be distributed to the dlegators and a 1/3 is distributed to the Guardian.
     */
    setMaxDelegatorsStakingRewards(
      maxDelegatorsStakingRewardsPercentMille: number | string,
    ): NonPayableTransactionObject<void>;

    /**
     * an emergency withdrawal, enables withdrawal of all funds to an escrow account. To be use in emergencies only.
     */
    emergencyWithdraw(): NonPayableTransactionObject<void>;
  };
  events: {
    BootstrapRewardsWithdrawn(cb?: Callback<BootstrapRewardsWithdrawn>): EventEmitter;
    BootstrapRewardsWithdrawn(options?: EventOptions, cb?: Callback<BootstrapRewardsWithdrawn>): EventEmitter;

    EmergencyWithdrawal(cb?: Callback<EmergencyWithdrawal>): EventEmitter;
    EmergencyWithdrawal(options?: EventOptions, cb?: Callback<EmergencyWithdrawal>): EventEmitter;

    FeesWithdrawn(cb?: Callback<FeesWithdrawn>): EventEmitter;
    FeesWithdrawn(options?: EventOptions, cb?: Callback<FeesWithdrawn>): EventEmitter;

    MaxDelegatorsStakingRewardsChanged(cb?: Callback<MaxDelegatorsStakingRewardsChanged>): EventEmitter;
    MaxDelegatorsStakingRewardsChanged(
      options?: EventOptions,
      cb?: Callback<MaxDelegatorsStakingRewardsChanged>,
    ): EventEmitter;

    RewardsAssigned(cb?: Callback<RewardsAssigned>): EventEmitter;
    RewardsAssigned(options?: EventOptions, cb?: Callback<RewardsAssigned>): EventEmitter;

    StakingRewardsDistributed(cb?: Callback<StakingRewardsDistributed>): EventEmitter;
    StakingRewardsDistributed(options?: EventOptions, cb?: Callback<StakingRewardsDistributed>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'BootstrapRewardsWithdrawn', cb: Callback<BootstrapRewardsWithdrawn>): void;
  once(event: 'BootstrapRewardsWithdrawn', options: EventOptions, cb: Callback<BootstrapRewardsWithdrawn>): void;

  once(event: 'EmergencyWithdrawal', cb: Callback<EmergencyWithdrawal>): void;
  once(event: 'EmergencyWithdrawal', options: EventOptions, cb: Callback<EmergencyWithdrawal>): void;

  once(event: 'FeesWithdrawn', cb: Callback<FeesWithdrawn>): void;
  once(event: 'FeesWithdrawn', options: EventOptions, cb: Callback<FeesWithdrawn>): void;

  once(event: 'MaxDelegatorsStakingRewardsChanged', cb: Callback<MaxDelegatorsStakingRewardsChanged>): void;
  once(
    event: 'MaxDelegatorsStakingRewardsChanged',
    options: EventOptions,
    cb: Callback<MaxDelegatorsStakingRewardsChanged>,
  ): void;

  once(event: 'RewardsAssigned', cb: Callback<RewardsAssigned>): void;
  once(event: 'RewardsAssigned', options: EventOptions, cb: Callback<RewardsAssigned>): void;

  once(event: 'StakingRewardsDistributed', cb: Callback<StakingRewardsDistributed>): void;
  once(event: 'StakingRewardsDistributed', options: EventOptions, cb: Callback<StakingRewardsDistributed>): void;
}
