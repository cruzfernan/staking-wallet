/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CommitteeSnapshot = ContractEventLog<{
  addrs: string[];
  weights: string[];
  certification: boolean[];
  0: string[];
  1: string[];
  2: boolean[];
}>;
export type ContractRegistryAddressUpdated = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type FunctionalOwnershipTransferred = ContractEventLog<{
  previousFunctionalOwner: string;
  newFunctionalOwner: string;
  0: string;
  1: string;
}>;
export type GuardianCommitteeChange = ContractEventLog<{
  addr: string;
  weight: string;
  certification: boolean;
  inCommittee: boolean;
  0: string;
  1: string;
  2: boolean;
  3: boolean;
}>;
export type Locked = ContractEventLog<{}>;
export type MaxCommitteeSizeChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type MaxTimeBetweenRewardAssignmentsChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type MigrationOwnershipTransferred = ContractEventLog<{
  previousMigrationOwner: string;
  newMigrationOwner: string;
  0: string;
  1: string;
}>;
export type Unlocked = ContractEventLog<{}>;

export interface Committee extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): Committee;
  clone(): Committee;
  methods: {
    /**
     * Allows the pendingFunctionalOwner address to finalize the transfer.
     */
    claimFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Allows the pendingMigrationOwner address to finalize the transfer.
     */
    claimMigrationOwnership(): NonPayableTransactionObject<void>;

    committee(
      arg0: number | string,
    ): NonPayableTransactionObject<{
      addr: string;
      weight: string;
      0: string;
      1: string;
    }>;

    /**
     * Returns the address of the current functionalOwner.
     */
    functionalOwner(): NonPayableTransactionObject<string>;

    getBootstrapRewardsWallet(): NonPayableTransactionObject<string>;

    getCertificationContract(): NonPayableTransactionObject<string>;

    getCommitteeContract(): NonPayableTransactionObject<string>;

    getDelegationsContract(): NonPayableTransactionObject<string>;

    getElectionsContract(): NonPayableTransactionObject<string>;

    getGuardiansRegistrationContract(): NonPayableTransactionObject<string>;

    getProtocolContract(): NonPayableTransactionObject<string>;

    getRewardsContract(): NonPayableTransactionObject<string>;

    getStakingContract(): NonPayableTransactionObject<string>;

    getStakingRewardsWallet(): NonPayableTransactionObject<string>;

    getSubscriptionsContract(): NonPayableTransactionObject<string>;

    /**
     * Returns true if the caller is the current functionalOwner.
     */
    isFunctionalOwner(): NonPayableTransactionObject<boolean>;

    /**
     * Returns true if the caller is the current migrationOwner.
     */
    isMigrationOwner(): NonPayableTransactionObject<boolean>;

    lock(): NonPayableTransactionObject<void>;

    locked(): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current migrationOwner.
     */
    migrationOwner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without functionalOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current functionalOwner.     * NOTE: Renouncing functionalOwnership will leave the contract without an functionalOwner, thereby removing any functionality that is only available to the functionalOwner.
     */
    renounceFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Leaves the contract without migrationOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current migrationOwner.     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner, thereby removing any functionality that is only available to the migrationOwner.
     */
    renounceMigrationOwnership(): NonPayableTransactionObject<void>;

    setContractRegistry(_contractRegistry: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current functionalOwner to set the pendingOwner address.
     * @param newFunctionalOwner The address to transfer functionalOwnership to.
     */
    transferFunctionalOwnership(newFunctionalOwner: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current migrationOwner to set the pendingOwner address.
     * @param newMigrationOwner The address to transfer migrationOwnership to.
     */
    transferMigrationOwnership(newMigrationOwner: string): NonPayableTransactionObject<void>;

    unlock(): NonPayableTransactionObject<void>;

    getMinCommitteeMemberWeight(): NonPayableTransactionObject<string>;

    /**
     * Called by: Elections contract Notifies a weight change for sorting to a relevant committee member. weight = 0 indicates removal of the member from the committee (for example on unregister, voteUnready, voteOut)
     */
    memberWeightChange(addr: string, weight: number | string): NonPayableTransactionObject<boolean>;

    memberCertificationChange(addr: string, isCertified: boolean): NonPayableTransactionObject<boolean>;

    addMember(addr: string, weight: number | string, isCertified: boolean): NonPayableTransactionObject<boolean>;

    /**
     * Called by: Elections contract Notifies a a member removal for example due to voteOut / voteUnready
     */
    removeMember(addr: string): NonPayableTransactionObject<boolean>;

    /**
     * Called by: Elections contract Returns the committee members and their weights
     */
    getCommittee(): NonPayableTransactionObject<{
      addrs: string[];
      weights: string[];
      certification: boolean[];
      0: string[];
      1: string[];
      2: boolean[];
    }>;

    /**
     * Called by: Elections contract Returns the committee members and their weights
     */
    _getCommittee(): NonPayableTransactionObject<{
      addrs: string[];
      weights: string[];
      certification: boolean[];
      0: string[];
      1: string[];
      2: boolean[];
    }>;

    setMaxTimeBetweenRewardAssignments(
      maxTimeBetweenRewardAssignments: number | string,
    ): NonPayableTransactionObject<void>;

    setMaxCommittee(maxCommitteeSize: number | string): NonPayableTransactionObject<void>;

    /**
     * returns the current committee used also by the rewards and fees contracts
     */
    getCommitteeInfo(): NonPayableTransactionObject<{
      addrs: string[];
      weights: string[];
      orbsAddrs: string[];
      certification: boolean[];
      ips: string[];
      0: string[];
      1: string[];
      2: string[];
      3: boolean[];
      4: string[];
    }>;

    getSettings(): NonPayableTransactionObject<{
      maxTimeBetweenRewardAssignments: string;
      maxCommitteeSize: string;
      0: string;
      1: string;
    }>;
  };
  events: {
    CommitteeSnapshot(cb?: Callback<CommitteeSnapshot>): EventEmitter;
    CommitteeSnapshot(options?: EventOptions, cb?: Callback<CommitteeSnapshot>): EventEmitter;

    ContractRegistryAddressUpdated(cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;
    ContractRegistryAddressUpdated(options?: EventOptions, cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;

    FunctionalOwnershipTransferred(cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;
    FunctionalOwnershipTransferred(options?: EventOptions, cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;

    GuardianCommitteeChange(cb?: Callback<GuardianCommitteeChange>): EventEmitter;
    GuardianCommitteeChange(options?: EventOptions, cb?: Callback<GuardianCommitteeChange>): EventEmitter;

    Locked(cb?: Callback<Locked>): EventEmitter;
    Locked(options?: EventOptions, cb?: Callback<Locked>): EventEmitter;

    MaxCommitteeSizeChanged(cb?: Callback<MaxCommitteeSizeChanged>): EventEmitter;
    MaxCommitteeSizeChanged(options?: EventOptions, cb?: Callback<MaxCommitteeSizeChanged>): EventEmitter;

    MaxTimeBetweenRewardAssignmentsChanged(cb?: Callback<MaxTimeBetweenRewardAssignmentsChanged>): EventEmitter;
    MaxTimeBetweenRewardAssignmentsChanged(
      options?: EventOptions,
      cb?: Callback<MaxTimeBetweenRewardAssignmentsChanged>,
    ): EventEmitter;

    MigrationOwnershipTransferred(cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;
    MigrationOwnershipTransferred(options?: EventOptions, cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;

    Unlocked(cb?: Callback<Unlocked>): EventEmitter;
    Unlocked(options?: EventOptions, cb?: Callback<Unlocked>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'CommitteeSnapshot', cb: Callback<CommitteeSnapshot>): void;
  once(event: 'CommitteeSnapshot', options: EventOptions, cb: Callback<CommitteeSnapshot>): void;

  once(event: 'ContractRegistryAddressUpdated', cb: Callback<ContractRegistryAddressUpdated>): void;
  once(
    event: 'ContractRegistryAddressUpdated',
    options: EventOptions,
    cb: Callback<ContractRegistryAddressUpdated>,
  ): void;

  once(event: 'FunctionalOwnershipTransferred', cb: Callback<FunctionalOwnershipTransferred>): void;
  once(
    event: 'FunctionalOwnershipTransferred',
    options: EventOptions,
    cb: Callback<FunctionalOwnershipTransferred>,
  ): void;

  once(event: 'GuardianCommitteeChange', cb: Callback<GuardianCommitteeChange>): void;
  once(event: 'GuardianCommitteeChange', options: EventOptions, cb: Callback<GuardianCommitteeChange>): void;

  once(event: 'Locked', cb: Callback<Locked>): void;
  once(event: 'Locked', options: EventOptions, cb: Callback<Locked>): void;

  once(event: 'MaxCommitteeSizeChanged', cb: Callback<MaxCommitteeSizeChanged>): void;
  once(event: 'MaxCommitteeSizeChanged', options: EventOptions, cb: Callback<MaxCommitteeSizeChanged>): void;

  once(event: 'MaxTimeBetweenRewardAssignmentsChanged', cb: Callback<MaxTimeBetweenRewardAssignmentsChanged>): void;
  once(
    event: 'MaxTimeBetweenRewardAssignmentsChanged',
    options: EventOptions,
    cb: Callback<MaxTimeBetweenRewardAssignmentsChanged>,
  ): void;

  once(event: 'MigrationOwnershipTransferred', cb: Callback<MigrationOwnershipTransferred>): void;
  once(
    event: 'MigrationOwnershipTransferred',
    options: EventOptions,
    cb: Callback<MigrationOwnershipTransferred>,
  ): void;

  once(event: 'Unlocked', cb: Callback<Unlocked>): void;
  once(event: 'Unlocked', options: EventOptions, cb: Callback<Unlocked>): void;
}
