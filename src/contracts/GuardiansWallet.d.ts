/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BootstrapRewardsWithdrawn = ContractEventLog<{
  guardian: string;
  amount: string;
  0: string;
  1: string;
}>;
export type ContractRegistryAddressUpdated = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type EmergencyWithdrawal = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type FeesWithdrawn = ContractEventLog<{
  guardian: string;
  amount: string;
  0: string;
  1: string;
}>;
export type FunctionalOwnershipTransferred = ContractEventLog<{
  previousFunctionalOwner: string;
  newFunctionalOwner: string;
  0: string;
  1: string;
}>;
export type MaxDelegatorsStakingRewardsChanged = ContractEventLog<{
  maxDelegatorsStakingRewardsPercentMille: string;
  0: string;
}>;
export type MigrationOwnershipTransferred = ContractEventLog<{
  previousMigrationOwner: string;
  newMigrationOwner: string;
  0: string;
  1: string;
}>;
export type RewardsAssigned = ContractEventLog<{
  assignees: string[];
  stakingRewards: string[];
  fees: string[];
  bootstrapRewards: string[];
  0: string[];
  1: string[];
  2: string[];
  3: string[];
}>;
export type StakingRewardsDistributed = ContractEventLog<{
  distributer: string;
  fromBlock: string;
  toBlock: string;
  split: string;
  txIndex: string;
  to: string[];
  amounts: string[];
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string[];
  6: string[];
}>;

export interface GuardiansWallet extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): GuardiansWallet;
  clone(): GuardiansWallet;
  methods: {
    /**
     * Allows the pendingFunctionalOwner address to finalize the transfer.
     */
    claimFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Allows the pendingMigrationOwner address to finalize the transfer.
     */
    claimMigrationOwnership(): NonPayableTransactionObject<void>;

    /**
     * Returns the address of the current functionalOwner.
     */
    functionalOwner(): NonPayableTransactionObject<string>;

    getBootstrapRewardsWallet(): NonPayableTransactionObject<string>;

    getCertificationContract(): NonPayableTransactionObject<string>;

    getCertifiedFeesWallet(): NonPayableTransactionObject<string>;

    getCommitteeContract(): NonPayableTransactionObject<string>;

    getDelegationsContract(): NonPayableTransactionObject<string>;

    getElectionsContract(): NonPayableTransactionObject<string>;

    getGeneralFeesWallet(): NonPayableTransactionObject<string>;

    getGuardiansRegistrationContract(): NonPayableTransactionObject<string>;

    getGuardiansWallet(): NonPayableTransactionObject<string>;

    getProtocolContract(): NonPayableTransactionObject<string>;

    getRewardsContract(): NonPayableTransactionObject<string>;

    getStakingContract(): NonPayableTransactionObject<string>;

    getStakingRewardsWallet(): NonPayableTransactionObject<string>;

    getSubscriptionsContract(): NonPayableTransactionObject<string>;

    /**
     * Returns true if the caller is the current functionalOwner.
     */
    isFunctionalOwner(): NonPayableTransactionObject<boolean>;

    /**
     * Returns true if the caller is the current migrationOwner.
     */
    isMigrationOwner(): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current migrationOwner.
     */
    migrationOwner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without functionalOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current functionalOwner.     * NOTE: Renouncing functionalOwnership will leave the contract without an functionalOwner, thereby removing any functionality that is only available to the functionalOwner.
     */
    renounceFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Leaves the contract without migrationOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current migrationOwner.     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner, thereby removing any functionality that is only available to the migrationOwner.
     */
    renounceMigrationOwnership(): NonPayableTransactionObject<void>;

    setContractRegistry(_contractRegistry: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current functionalOwner to set the pendingOwner address.
     * @param newFunctionalOwner The address to transfer functionalOwnership to.
     */
    transferFunctionalOwnership(newFunctionalOwner: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current migrationOwner to set the pendingOwner address.
     * @param newMigrationOwner The address to transfer migrationOwnership to.
     */
    transferMigrationOwnership(newMigrationOwner: string): NonPayableTransactionObject<void>;

    assignRewardsToGuardians(
      guardians: string[],
      stakingRewards: (number | string)[],
      fees: (number | string)[],
      bootstrapRewards: (number | string)[],
    ): NonPayableTransactionObject<void>;

    setMaxDelegatorsStakingRewards(
      _maxDelegatorsStakingRewardsPercentMille: number | string,
    ): NonPayableTransactionObject<void>;

    getBootstrapBalance(addr: string): NonPayableTransactionObject<string>;

    withdrawBootstrapFunds(): NonPayableTransactionObject<void>;

    getStakingRewardBalance(addr: string): NonPayableTransactionObject<string>;

    distributeStakingRewards(
      totalAmount: number | string,
      fromBlock: number | string,
      toBlock: number | string,
      split: number | string,
      txIndex: number | string,
      to: string[],
      amounts: (number | string)[],
    ): NonPayableTransactionObject<void>;

    withdrawFees(): NonPayableTransactionObject<void>;

    getFeeBalance(addr: string): NonPayableTransactionObject<string>;

    emergencyWithdraw(): NonPayableTransactionObject<void>;
  };
  events: {
    BootstrapRewardsWithdrawn(cb?: Callback<BootstrapRewardsWithdrawn>): EventEmitter;
    BootstrapRewardsWithdrawn(options?: EventOptions, cb?: Callback<BootstrapRewardsWithdrawn>): EventEmitter;

    ContractRegistryAddressUpdated(cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;
    ContractRegistryAddressUpdated(options?: EventOptions, cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;

    EmergencyWithdrawal(cb?: Callback<EmergencyWithdrawal>): EventEmitter;
    EmergencyWithdrawal(options?: EventOptions, cb?: Callback<EmergencyWithdrawal>): EventEmitter;

    FeesWithdrawn(cb?: Callback<FeesWithdrawn>): EventEmitter;
    FeesWithdrawn(options?: EventOptions, cb?: Callback<FeesWithdrawn>): EventEmitter;

    FunctionalOwnershipTransferred(cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;
    FunctionalOwnershipTransferred(options?: EventOptions, cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;

    MaxDelegatorsStakingRewardsChanged(cb?: Callback<MaxDelegatorsStakingRewardsChanged>): EventEmitter;
    MaxDelegatorsStakingRewardsChanged(
      options?: EventOptions,
      cb?: Callback<MaxDelegatorsStakingRewardsChanged>,
    ): EventEmitter;

    MigrationOwnershipTransferred(cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;
    MigrationOwnershipTransferred(options?: EventOptions, cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;

    RewardsAssigned(cb?: Callback<RewardsAssigned>): EventEmitter;
    RewardsAssigned(options?: EventOptions, cb?: Callback<RewardsAssigned>): EventEmitter;

    StakingRewardsDistributed(cb?: Callback<StakingRewardsDistributed>): EventEmitter;
    StakingRewardsDistributed(options?: EventOptions, cb?: Callback<StakingRewardsDistributed>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'BootstrapRewardsWithdrawn', cb: Callback<BootstrapRewardsWithdrawn>): void;
  once(event: 'BootstrapRewardsWithdrawn', options: EventOptions, cb: Callback<BootstrapRewardsWithdrawn>): void;

  once(event: 'ContractRegistryAddressUpdated', cb: Callback<ContractRegistryAddressUpdated>): void;
  once(
    event: 'ContractRegistryAddressUpdated',
    options: EventOptions,
    cb: Callback<ContractRegistryAddressUpdated>,
  ): void;

  once(event: 'EmergencyWithdrawal', cb: Callback<EmergencyWithdrawal>): void;
  once(event: 'EmergencyWithdrawal', options: EventOptions, cb: Callback<EmergencyWithdrawal>): void;

  once(event: 'FeesWithdrawn', cb: Callback<FeesWithdrawn>): void;
  once(event: 'FeesWithdrawn', options: EventOptions, cb: Callback<FeesWithdrawn>): void;

  once(event: 'FunctionalOwnershipTransferred', cb: Callback<FunctionalOwnershipTransferred>): void;
  once(
    event: 'FunctionalOwnershipTransferred',
    options: EventOptions,
    cb: Callback<FunctionalOwnershipTransferred>,
  ): void;

  once(event: 'MaxDelegatorsStakingRewardsChanged', cb: Callback<MaxDelegatorsStakingRewardsChanged>): void;
  once(
    event: 'MaxDelegatorsStakingRewardsChanged',
    options: EventOptions,
    cb: Callback<MaxDelegatorsStakingRewardsChanged>,
  ): void;

  once(event: 'MigrationOwnershipTransferred', cb: Callback<MigrationOwnershipTransferred>): void;
  once(
    event: 'MigrationOwnershipTransferred',
    options: EventOptions,
    cb: Callback<MigrationOwnershipTransferred>,
  ): void;

  once(event: 'RewardsAssigned', cb: Callback<RewardsAssigned>): void;
  once(event: 'RewardsAssigned', options: EventOptions, cb: Callback<RewardsAssigned>): void;

  once(event: 'StakingRewardsDistributed', cb: Callback<StakingRewardsDistributed>): void;
  once(event: 'StakingRewardsDistributed', options: EventOptions, cb: Callback<StakingRewardsDistributed>): void;
}
