/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ContractRegistryAddressUpdated = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type FunctionalOwnershipTransferred = ContractEventLog<{
  previousFunctionalOwner: string;
  newFunctionalOwner: string;
  0: string;
  1: string;
}>;
export type GuardianStatusUpdated = ContractEventLog<{
  addr: string;
  readyToSync: boolean;
  readyForCommittee: boolean;
  0: string;
  1: boolean;
  2: boolean;
}>;
export type GuardianVotedOut = ContractEventLog<{
  guardian: string;
  0: string;
}>;
export type GuardianVotedUnready = ContractEventLog<{
  guardian: string;
  0: string;
}>;
export type Locked = ContractEventLog<{}>;
export type MigrationOwnershipTransferred = ContractEventLog<{
  previousMigrationOwner: string;
  newMigrationOwner: string;
  0: string;
  1: string;
}>;
export type MinSelfStakePercentMilleChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type StakeChanged = ContractEventLog<{
  addr: string;
  selfStake: string;
  delegated_stake: string;
  effective_stake: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Unlocked = ContractEventLog<{}>;
export type VoteOutCasted = ContractEventLog<{
  voter: string;
  subject: string;
  0: string;
  1: string;
}>;
export type VoteOutPercentageThresholdChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type VoteUnreadyCasted = ContractEventLog<{
  voter: string;
  subject: string;
  0: string;
  1: string;
}>;
export type VoteUnreadyPercentageThresholdChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type VoteUnreadyTimeoutSecondsChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;

export interface Elections extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): Elections;
  clone(): Elections;
  methods: {
    /**
     * Allows the pendingFunctionalOwner address to finalize the transfer.
     */
    claimFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Allows the pendingMigrationOwner address to finalize the transfer.
     */
    claimMigrationOwnership(): NonPayableTransactionObject<void>;

    /**
     * Returns the address of the current functionalOwner.
     */
    functionalOwner(): NonPayableTransactionObject<string>;

    getBootstrapRewardsWallet(): NonPayableTransactionObject<string>;

    getCertificationContract(): NonPayableTransactionObject<string>;

    getCommitteeContract(): NonPayableTransactionObject<string>;

    getDelegationsContract(): NonPayableTransactionObject<string>;

    getElectionsContract(): NonPayableTransactionObject<string>;

    getGuardiansRegistrationContract(): NonPayableTransactionObject<string>;

    getProtocolContract(): NonPayableTransactionObject<string>;

    getRewardsContract(): NonPayableTransactionObject<string>;

    getStakingContract(): NonPayableTransactionObject<string>;

    getStakingRewardsWallet(): NonPayableTransactionObject<string>;

    getSubscriptionsContract(): NonPayableTransactionObject<string>;

    /**
     * Returns true if the caller is the current functionalOwner.
     */
    isFunctionalOwner(): NonPayableTransactionObject<boolean>;

    /**
     * Returns true if the caller is the current migrationOwner.
     */
    isMigrationOwner(): NonPayableTransactionObject<boolean>;

    lock(): NonPayableTransactionObject<void>;

    locked(): NonPayableTransactionObject<boolean>;

    /**
     * Returns the address of the current migrationOwner.
     */
    migrationOwner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without functionalOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current functionalOwner.     * NOTE: Renouncing functionalOwnership will leave the contract without an functionalOwner, thereby removing any functionality that is only available to the functionalOwner.
     */
    renounceFunctionalOwnership(): NonPayableTransactionObject<void>;

    /**
     * Leaves the contract without migrationOwner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current migrationOwner.     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner, thereby removing any functionality that is only available to the migrationOwner.
     */
    renounceMigrationOwnership(): NonPayableTransactionObject<void>;

    setContractRegistry(_contractRegistry: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current functionalOwner to set the pendingOwner address.
     * @param newFunctionalOwner The address to transfer functionalOwnership to.
     */
    transferFunctionalOwnership(newFunctionalOwner: string): NonPayableTransactionObject<void>;

    /**
     * Allows the current migrationOwner to set the pendingOwner address.
     * @param newMigrationOwner The address to transfer migrationOwnership to.
     */
    transferMigrationOwnership(newMigrationOwner: string): NonPayableTransactionObject<void>;

    unlock(): NonPayableTransactionObject<void>;

    /**
     * Called by: guardian registration contract Notifies a new guardian was registered
     */
    guardianRegistered(addr: string): NonPayableTransactionObject<void>;

    /**
     * Called by: guardian registration contract Notifies a new guardian was unregistered
     */
    guardianUnregistered(addr: string): NonPayableTransactionObject<void>;

    /**
     * Called by: guardian registration contract Notifies on a guardian certification change
     */
    guardianCertificationChanged(addr: string, isCertified: boolean): NonPayableTransactionObject<void>;

    readyForCommittee(): NonPayableTransactionObject<void>;

    readyToSync(): NonPayableTransactionObject<void>;

    voteUnready(subjectAddr: string): NonPayableTransactionObject<void>;

    voteOut(subject: string): NonPayableTransactionObject<void>;

    getVoteOutVote(addr: string): NonPayableTransactionObject<string>;

    getAccumulatedStakesForVoteOut(addr: string): NonPayableTransactionObject<string>;

    delegatedStakeChange(
      addr: string,
      selfStake: number | string,
      delegatedStake: number | string,
      totalDelegatedStake: number | string,
    ): NonPayableTransactionObject<void>;

    setVoteUnreadyTimeoutSeconds(voteUnreadyTimeoutSeconds: number | string): NonPayableTransactionObject<void>;

    setMinSelfStakePercentMille(minSelfStakePercentMille: number | string): NonPayableTransactionObject<void>;

    setVoteOutPercentageThreshold(voteOutPercentageThreshold: number | string): NonPayableTransactionObject<void>;

    setVoteUnreadyPercentageThreshold(
      voteUnreadyPercentageThreshold: number | string,
    ): NonPayableTransactionObject<void>;

    getSettings(): NonPayableTransactionObject<{
      voteUnreadyTimeoutSeconds: string;
      minSelfStakePercentMille: string;
      voteUnreadyPercentageThreshold: string;
      voteOutPercentageThreshold: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;
  };
  events: {
    ContractRegistryAddressUpdated(cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;
    ContractRegistryAddressUpdated(options?: EventOptions, cb?: Callback<ContractRegistryAddressUpdated>): EventEmitter;

    FunctionalOwnershipTransferred(cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;
    FunctionalOwnershipTransferred(options?: EventOptions, cb?: Callback<FunctionalOwnershipTransferred>): EventEmitter;

    GuardianStatusUpdated(cb?: Callback<GuardianStatusUpdated>): EventEmitter;
    GuardianStatusUpdated(options?: EventOptions, cb?: Callback<GuardianStatusUpdated>): EventEmitter;

    GuardianVotedOut(cb?: Callback<GuardianVotedOut>): EventEmitter;
    GuardianVotedOut(options?: EventOptions, cb?: Callback<GuardianVotedOut>): EventEmitter;

    GuardianVotedUnready(cb?: Callback<GuardianVotedUnready>): EventEmitter;
    GuardianVotedUnready(options?: EventOptions, cb?: Callback<GuardianVotedUnready>): EventEmitter;

    Locked(cb?: Callback<Locked>): EventEmitter;
    Locked(options?: EventOptions, cb?: Callback<Locked>): EventEmitter;

    MigrationOwnershipTransferred(cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;
    MigrationOwnershipTransferred(options?: EventOptions, cb?: Callback<MigrationOwnershipTransferred>): EventEmitter;

    MinSelfStakePercentMilleChanged(cb?: Callback<MinSelfStakePercentMilleChanged>): EventEmitter;
    MinSelfStakePercentMilleChanged(
      options?: EventOptions,
      cb?: Callback<MinSelfStakePercentMilleChanged>,
    ): EventEmitter;

    StakeChanged(cb?: Callback<StakeChanged>): EventEmitter;
    StakeChanged(options?: EventOptions, cb?: Callback<StakeChanged>): EventEmitter;

    Unlocked(cb?: Callback<Unlocked>): EventEmitter;
    Unlocked(options?: EventOptions, cb?: Callback<Unlocked>): EventEmitter;

    VoteOutCasted(cb?: Callback<VoteOutCasted>): EventEmitter;
    VoteOutCasted(options?: EventOptions, cb?: Callback<VoteOutCasted>): EventEmitter;

    VoteOutPercentageThresholdChanged(cb?: Callback<VoteOutPercentageThresholdChanged>): EventEmitter;
    VoteOutPercentageThresholdChanged(
      options?: EventOptions,
      cb?: Callback<VoteOutPercentageThresholdChanged>,
    ): EventEmitter;

    VoteUnreadyCasted(cb?: Callback<VoteUnreadyCasted>): EventEmitter;
    VoteUnreadyCasted(options?: EventOptions, cb?: Callback<VoteUnreadyCasted>): EventEmitter;

    VoteUnreadyPercentageThresholdChanged(cb?: Callback<VoteUnreadyPercentageThresholdChanged>): EventEmitter;
    VoteUnreadyPercentageThresholdChanged(
      options?: EventOptions,
      cb?: Callback<VoteUnreadyPercentageThresholdChanged>,
    ): EventEmitter;

    VoteUnreadyTimeoutSecondsChanged(cb?: Callback<VoteUnreadyTimeoutSecondsChanged>): EventEmitter;
    VoteUnreadyTimeoutSecondsChanged(
      options?: EventOptions,
      cb?: Callback<VoteUnreadyTimeoutSecondsChanged>,
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'ContractRegistryAddressUpdated', cb: Callback<ContractRegistryAddressUpdated>): void;
  once(
    event: 'ContractRegistryAddressUpdated',
    options: EventOptions,
    cb: Callback<ContractRegistryAddressUpdated>,
  ): void;

  once(event: 'FunctionalOwnershipTransferred', cb: Callback<FunctionalOwnershipTransferred>): void;
  once(
    event: 'FunctionalOwnershipTransferred',
    options: EventOptions,
    cb: Callback<FunctionalOwnershipTransferred>,
  ): void;

  once(event: 'GuardianStatusUpdated', cb: Callback<GuardianStatusUpdated>): void;
  once(event: 'GuardianStatusUpdated', options: EventOptions, cb: Callback<GuardianStatusUpdated>): void;

  once(event: 'GuardianVotedOut', cb: Callback<GuardianVotedOut>): void;
  once(event: 'GuardianVotedOut', options: EventOptions, cb: Callback<GuardianVotedOut>): void;

  once(event: 'GuardianVotedUnready', cb: Callback<GuardianVotedUnready>): void;
  once(event: 'GuardianVotedUnready', options: EventOptions, cb: Callback<GuardianVotedUnready>): void;

  once(event: 'Locked', cb: Callback<Locked>): void;
  once(event: 'Locked', options: EventOptions, cb: Callback<Locked>): void;

  once(event: 'MigrationOwnershipTransferred', cb: Callback<MigrationOwnershipTransferred>): void;
  once(
    event: 'MigrationOwnershipTransferred',
    options: EventOptions,
    cb: Callback<MigrationOwnershipTransferred>,
  ): void;

  once(event: 'MinSelfStakePercentMilleChanged', cb: Callback<MinSelfStakePercentMilleChanged>): void;
  once(
    event: 'MinSelfStakePercentMilleChanged',
    options: EventOptions,
    cb: Callback<MinSelfStakePercentMilleChanged>,
  ): void;

  once(event: 'StakeChanged', cb: Callback<StakeChanged>): void;
  once(event: 'StakeChanged', options: EventOptions, cb: Callback<StakeChanged>): void;

  once(event: 'Unlocked', cb: Callback<Unlocked>): void;
  once(event: 'Unlocked', options: EventOptions, cb: Callback<Unlocked>): void;

  once(event: 'VoteOutCasted', cb: Callback<VoteOutCasted>): void;
  once(event: 'VoteOutCasted', options: EventOptions, cb: Callback<VoteOutCasted>): void;

  once(event: 'VoteOutPercentageThresholdChanged', cb: Callback<VoteOutPercentageThresholdChanged>): void;
  once(
    event: 'VoteOutPercentageThresholdChanged',
    options: EventOptions,
    cb: Callback<VoteOutPercentageThresholdChanged>,
  ): void;

  once(event: 'VoteUnreadyCasted', cb: Callback<VoteUnreadyCasted>): void;
  once(event: 'VoteUnreadyCasted', options: EventOptions, cb: Callback<VoteUnreadyCasted>): void;

  once(event: 'VoteUnreadyPercentageThresholdChanged', cb: Callback<VoteUnreadyPercentageThresholdChanged>): void;
  once(
    event: 'VoteUnreadyPercentageThresholdChanged',
    options: EventOptions,
    cb: Callback<VoteUnreadyPercentageThresholdChanged>,
  ): void;

  once(event: 'VoteUnreadyTimeoutSecondsChanged', cb: Callback<VoteUnreadyTimeoutSecondsChanged>): void;
  once(
    event: 'VoteUnreadyTimeoutSecondsChanged',
    options: EventOptions,
    cb: Callback<VoteUnreadyTimeoutSecondsChanged>,
  ): void;
}
