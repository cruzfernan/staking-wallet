/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GuardianCertificationUpdate = ContractEventLog<{
  guardian: string;
  isCertified: boolean;
  0: string;
  1: boolean;
}>;

export interface ICertification extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): ICertification;
  clone(): ICertification;
  methods: {
    /**
     * Called by a guardian as part of the automatic vote unready flow Used by the Election contract
     */
    isGuardianCertified(addr: string): NonPayableTransactionObject<boolean>;

    /**
     * Called by a guardian as part of the automatic vote unready flow Used by the Election contract
     */
    setGuardianCertification(addr: string, isCertified: boolean): NonPayableTransactionObject<void>;

    /**
     * Updates the address calldata of the contract registry
     */
    setContractRegistry(_contractRegistry: string): NonPayableTransactionObject<void>;
  };
  events: {
    GuardianCertificationUpdate(cb?: Callback<GuardianCertificationUpdate>): EventEmitter;
    GuardianCertificationUpdate(options?: EventOptions, cb?: Callback<GuardianCertificationUpdate>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'GuardianCertificationUpdate', cb: Callback<GuardianCertificationUpdate>): void;
  once(event: 'GuardianCertificationUpdate', options: EventOptions, cb: Callback<GuardianCertificationUpdate>): void;
}
