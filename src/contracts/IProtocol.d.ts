/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ProtocolVersionChanged = ContractEventLog<{
  deploymentSubset: string;
  currentVersion: string;
  nextVersion: string;
  fromTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface IProtocol extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IProtocol;
  clone(): IProtocol;
  methods: {
    /**
     * returns true if the given deployment subset exists (i.e - is registered with a protocol version)
     */
    deploymentSubsetExists(deploymentSubset: string): NonPayableTransactionObject<boolean>;

    /**
     * returns the current protocol version for the given deployment subset.
     */
    getProtocolVersion(deploymentSubset: string): NonPayableTransactionObject<string>;

    /**
     * create a new deployment subset.
     */
    createDeploymentSubset(
      deploymentSubset: string,
      initialProtocolVersion: number | string,
    ): NonPayableTransactionObject<void>;

    /**
     * schedules a protocol version upgrade for the given deployment subset.
     */
    setProtocolVersion(
      deploymentSubset: string,
      nextVersion: number | string,
      fromTimestamp: number | string,
    ): NonPayableTransactionObject<void>;
  };
  events: {
    ProtocolVersionChanged(cb?: Callback<ProtocolVersionChanged>): EventEmitter;
    ProtocolVersionChanged(options?: EventOptions, cb?: Callback<ProtocolVersionChanged>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'ProtocolVersionChanged', cb: Callback<ProtocolVersionChanged>): void;
  once(event: 'ProtocolVersionChanged', options: EventOptions, cb: Callback<ProtocolVersionChanged>): void;
}
