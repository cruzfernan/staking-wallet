/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ContractAddressUpdated = ContractEventLog<{
  contractName: string;
  addr: string;
  0: string;
  1: string;
}>;

export interface IContractRegistry extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): IContractRegistry;
  clone(): IContractRegistry;
  methods: {
    /**
     * updates the contracts address and emits a corresponding event
     */
    set(contractName: string, addr: string): NonPayableTransactionObject<void>;

    /**
     * returns the current address of the
     */
    get(contractName: string): NonPayableTransactionObject<string>;
  };
  events: {
    ContractAddressUpdated(cb?: Callback<ContractAddressUpdated>): EventEmitter;
    ContractAddressUpdated(options?: EventOptions, cb?: Callback<ContractAddressUpdated>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'ContractAddressUpdated', cb: Callback<ContractAddressUpdated>): void;
  once(event: 'ContractAddressUpdated', options: EventOptions, cb: Callback<ContractAddressUpdated>): void;
}
